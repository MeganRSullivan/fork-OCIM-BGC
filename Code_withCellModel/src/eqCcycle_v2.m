function [par, C, Cx, Cxx] = eqCcycle_v2(x, par)
% ip is the mapping from x to parameter names (see switch below)
% output: C is model prediction of DIP,POP,and DOP
% output: F partial derivative of P model w.r.t. model parameters x
% output: Fxx hessian matrix of P model w.r.t.  model parameters x
    global GC
    on = true; off = false;
    iwet = par.iwet;
    nwet = par.nwet;

    % unpack the parameters to be optimized
    if (par.opt_sigC == on)
        lsigC = x(par.pindx.lsigC);
        sigC  = exp(lsigC);
    else
        sigC  = par.sigC;
    end
    par.sigC = sigC; % pass parameter to C/Si/O models

    % kru
    if (par.opt_kru == on)
        lkru = x(par.pindx.lkru);
        par.kru = exp(lkru) ; 
    end

    % krd
    if (par.opt_krd == on)
        lkrd = x(par.pindx.lkrd);
        par.krd = exp(lkrd) ; 
    end

    % etau 
    if (par.opt_etau == on)
        letau = x(par.pindx.letau) ;
        par.etau = exp(letau) ;
    end

    % etad 
    if (par.opt_etad == on)
        letad = x(par.pindx.letad) ;
        par.etad = exp(letad) ;
    end

    % bC_T
    if (par.opt_bC_T == on)
        par.bC_T = x(par.pindx.bC_T);
    end

    % bC
    if (par.opt_bC == on)
        lbC = x(par.pindx.lbC) ;
        par.bC  = exp(lbC)     ;
    end

    % d
    if (par.opt_d == on)
        ld = x(par.pindx.ld) ;
        par.d = exp(ld)      ;
    end

    % Q10C
    if (par.opt_Q10C == on)
        lQ10C = x(par.pindx.lQ10C) ;
        par.Q10C = exp(lQ10C) ;
    end

    % kdC
    if (par.opt_kdC == on)
        lkdC = x(par.pindx.lkdC) ;
        par.kdC  = exp(lkdC) ;
    end

    % R_Si
    if (par.opt_R_Si == on)
        par.R_Si = x(par.pindx.R_Si);
    end

    % rR
    if (par.opt_rR == on)
        lrR = x(par.pindx.lrR);
        par.rR = exp(lrR);
    end

    % cc
    if (par.opt_cc)
        lcc = x(par.pindx.lcc);
        par.cc = exp(lcc);
    end 

    % dd
    if (par.opt_dd)
        ldd = x(par.pindx.ldd);
        par.dd = exp(ldd);
    end

    % ccT
    if (par.opt_ccT)
        par.ccT = x(par.pindx.ccT);
    end

    % ddT
    if (par.opt_ddT)
        lddT = x(par.pindx.lddT);
        par.ddT = exp(lddT);
    end
    %
    options.iprint = 1   ; 
    options.atol = 1e-12 ;          % reoptimized ver.  ---> -13
    options.rtol = 1e-12 ;          % reoptimized ver. ---> -13
    fprintf('Solving C model ...\n') ;

    X0  = GC;
   
    [C,ierr] = nsnew(X0,@(X) C_eqn(X, par),options) ;

    par.Cfailure = off ;
    if (ierr ~= 0)
        fprintf('eqCcycle did not converge.\n') ;
        par.Cfailure = on;
        npx  = par.npx   ;
        ncx  = par.ncx   ;
        nbx  = par.nbx   ; % number of cell model parameters
        nx   = npx + ncx + nbx;
        C    = GC ;
        Cx   = sparse(7*par.nwet, nx) ;
        Cxx  = sparse(7*par.nwet, nchoosek(nx,2)+nx) ;
        [par.G,par.Gx,par.Gxx] = uptake_C(par) ;
        [F,FD,par] = C_eqn(C, par);
    else
        fprintf('reset the global variable for the next call eqCycle. \n')
        GC = real(C) + 1e-8*randn(7*nwet,1) ;
        [F,FD,par,Cx,Cxx] = C_eqn(C, par);
    end
end

function [F,FD,par,Cx,Cxx] = C_eqn(X, par)    
% unpack some useful stuff
    on = true; off = false;
    grd   = par.grd   ;
    M3d   = par.M3d   ;
    TRdiv = par.TRdiv ;
    iwet  = par.iwet  ;
    nwet  = par.nwet  ;
    dVt   = par.dVt   ;
    I     = par.I     ;
    
    DIC  = X(0*nwet+1:1*nwet) ; 
    POC  = X(1*nwet+1:2*nwet) ;
    DOC  = X(2*nwet+1:3*nwet) ;
    PIC  = X(3*nwet+1:4*nwet) ;
    ALK  = X(4*nwet+1:5*nwet) ;
    DOCl = X(5*nwet+1:6*nwet) ;
    DOCr = X(6*nwet+1:7*nwet) ;

    PO4 = par.po4obs(iwet) ;    % phosphate obs
    Tz = par.Tz;                % temperature obs scaled between zero and 1.
    % fixed parameters
    kappa_p = par.kappa_p;
    kappa_l = par.kappa_l;
    kPIC  = par.kPIC     ;
    gamma = par.gamma    ;
    % parameters need to be optimized
    alpha = par.alpha    ;
    beta  = par.beta     ;
    sigP  = par.sigP     ;
    sigC  = par.sigC     ;
    kru   = par.kru      ;
    krd   = par.krd      ;
    etau  = par.etau     ;
    etad  = par.etad     ; 
    bC_T  = par.bC_T     ;
    bC    = par.bC       ;
    d     = par.d        ;
    Q10C  = par.Q10C     ;
    kdC   = par.kdC      ;
    R_Si  = par.R_Si     ;
    rR    = par.rR       ;
    % optimizable parameters that depend on stoichiometry model used for C2P
    if par.C2P_Tzmodel
        ccT   = par.ccT      ;
        ddT   = par.ddT      ;
    else
        cc    = par.cc       ;
        dd    = par.dd       ;
    end
    % stoichiometry (move this outside of eqCcycle)
    N2C   = 18/106 ; %16/117 ; 
    if isfield(par,'CellOut')
		C2P = par.CellOut.C2P(iwet); % note: size(par.CellOut.C2P) = [90 , 180 , 24]
        %C2P = par.C2P; % C2P is already saved in par (vector length nwet) in neglogpost
		%N2C = 1./par.CellOut.C2N(iwet);
	elseif (par.C2P_Tzmodel)
        %Tz01 = par.Tz.*1.0e8 ; % par.Tz has been modified to be temperature scaled between zero and 1. rescaling is no longer needed.
		C2P = 1./(ccT*Tz + ddT);
	else
		C2P = 1./(cc*PO4 + dd);
	end
    par.C2P = C2P  ;        % Note: size(par.C2P) =  [191169 , 1]
    % virtual flux
    pme   = par.pme      ;
    % PIC to POC rain ratio 
    vout  = mkPIC2P(par) ;
    RR    = vout.RR      ;
    RR_Si = vout.RR_Si   ;
    RR_rR = vout.RR_rR   ;
    clear vout 
    % kappa_dc ;
    tf    = (par.vT - 30)/10 ;
    kC    = d0( kdC * Q10C .^ tf ) ;
    
    % Particle flux divergence
    PFDa = buildPFD(par, 'PIC') ;
    PFDc = buildPFD(par, 'POC') ;
    par.PFDa = PFDa ;
    par.PFDc = PFDc ;
    par.DIC  = DIC  ;
    par.ALK  = ALK  ;
    % Air-Sea gas exchange
    vout  = Fsea2air(par, 'CO2');
    G_dic = vout.G_dic ;
    G_alk = vout.G_alk ;
    JgDIC = vout.JgDIC ;
    clear vout 
    % biological DIC uptake operator
    G = uptake_C(par)  ; par.G = G ;
    
    kappa_g = par.kappa_g ;
    ALKbar  = par.ALKbar  ;
    sDICbar = par.sDICbar ;
    sALKbar = par.sALKbar ;

    UM = par.UM ; 
    DM = par.DM ;
    WM = par.WM ;
    kappa_r = kru*UM + krd*DM ;
    eta     = etau*WM ;
    % eta     = etau*UM + etad*DM ;
    eq1 = TRdiv*DIC + (1-sigC-gamma)*RR*G*C2P - eta*(kC*DOC) ...
          - kPIC*PIC - JgDIC + pme*sDICbar - kappa_r*DOCr ...
          - kappa_l*DOCl - kappa_p*POC + par.Cnpp(iwet); 

    eq2 = (PFDc+kappa_p*I)*POC - (1-sigC-gamma)*G*C2P   ; % FPOC

    eq3 = (TRdiv+kC)*DOC - sigC*G*C2P  ; % FDOC

    eq4 = (PFDa + kPIC*I)*PIC - (1-sigC-gamma)*RR*G*C2P ; % FPIC

    eq5 = TRdiv*ALK + 2*(1-sigC-gamma)*RR*G*C2P - 2*kPIC*PIC - N2C*par.Cnpp(iwet) ...
          + N2C*(eta*(kC*DOC) + kappa_r*DOCr + kappa_l*DOCl + kappa_p*POC) ...
          + pme*sALKbar + kappa_g*(ALK - ALKbar) ;  % ALK 
               
    eq6 = (TRdiv+kappa_l*I)*DOCl - (par.Cnpp(iwet) - G*C2P) ; %  DOCl 

    eq7 = (TRdiv+kappa_r)*DOCr - (I-eta)*(kC*DOC) ;  % DOCr 

    F   = [eq1; eq2; eq3; eq4; eq5; eq6; eq7];

    if nargout > 1
        % construct the LHS matrix for the offline model
        % disp('Preparing LHS and RHS matrix:')
        % colum 1 dFdDIC
        Jc{1,1} = TRdiv - G_dic ; 
        Jc{2,1} = 0*I ;
        Jc{3,1} = 0*I ;
        Jc{4,1} = 0*I ;
        Jc{5,1} = 0*I ;
        Jc{6,1} = 0*I ;
        Jc{7,1} = 0*I ;
        % colum 2 dFdPOC
        Jc{1,2} = -kappa_p*I ;
        Jc{2,2} = PFDc + kappa_p*I ;
        Jc{3,2} = 0*I ;
        Jc{4,2} = 0*I ;
        Jc{5,2} = N2C*kappa_p*I ;
        Jc{6,2} = 0*I ;
        Jc{7,2} = 0*I ;
        % colum 3 dFdDOC
        Jc{1,3} = -eta*kC ;
        Jc{2,3} = 0*I ;
        Jc{3,3} = TRdiv + kC ;
        Jc{4,3} = 0*I ;
        Jc{5,3} = eta*N2C*kC ;
        Jc{6,3} = 0*I ;
        Jc{7,3} = -(I-eta)*kC ;
        % colum 4 dFdPIC
        Jc{1,4} = -kPIC*I ;
        Jc{2,4} = 0*I ;
        Jc{3,4} = 0*I ;
        Jc{4,4} = PFDa + kPIC*I ;
        Jc{5,4} = -2*kPIC*I ;
        Jc{6,4} = 0*I ;
        Jc{7,4} = 0*I ;
        % column 5 dFdALK
        Jc{1,5} = -G_alk ;
        Jc{2,5} = 0*I ;
        Jc{3,5} = 0*I ;
        Jc{4,5} = 0*I ;
        Jc{5,5} = TRdiv + kappa_g*I ;
        Jc{6,5} = 0*I ;
        Jc{7,5} = 0*I ;
        % column 6 dFdDOCl
        Jc{1,6} = -kappa_l*I ;
        Jc{2,6} = 0*I ;
        Jc{3,6} = 0*I ;
        Jc{4,6} = 0*I ;
        Jc{5,6} = N2C*kappa_l*I ;
        Jc{6,6} = TRdiv + kappa_l*I ;
        Jc{7,6} = 0*I ;
        % column 7 dFdDOCr
        Jc{1,7} = -kappa_r ;
        Jc{2,7} = 0*I ;
        Jc{3,7} = 0*I ;
        Jc{4,7} = 0*I ;
        Jc{5,7} = N2C*kappa_r ;
        Jc{6,7} = 0*I ;
        Jc{7,7} = TRdiv + kappa_r ;
        fprintf('factorize Jacobian matrix ...\n')
        tic 
	FD = mfactor(cell2mat(Jc)) ; 
	toc
    end 
    
    fprintf('Compute the gradient of the solution wrt parameters ...\n')
    tic
    if (par.optim == off)
        Cx = [];
    elseif (par.optim & nargout > 2)
        pindx = par.pindx ;
        Z = sparse(nwet,1);
        if par.opt_cc==on | par.opt_dd==on
            C2P_cc = -PO4./(cc*PO4 + dd).^2;
            C2P_dd = -1./(cc*PO4 + dd).^2;
            par.C2P_cc = C2P_cc;
            par.C2P_dd = C2P_dd;
        end
        if (par.opt_ccT ==on | par.opt_ddT==on)
			C2P_ccT = -Tz./(ccT*Tz + ddT).^2;
        	C2P_ddT = -1./(ccT*Tz + ddT).^2;
        	par.C2P_ccT = C2P_ccT;
        	par.C2P_ddT = C2P_ddT;
		end
        if par.Cellmodel == on  %(using eqC2Puptake)
			C2Px   = par.C2Px;
		end
        [~,Gx] = uptake_C(par);
        par.Gx = Gx;
        npx    = par.npx ;
        ncx    = par.ncx ;
        nbx    = par.nbx ; 

        % ----------------- P model  parameters ------------------
        % DEV NOTE: If you want to use model DIP as the input to the 
        % cell model, then when the cell model is on, C2P is a 
        % function of not just the cell model parameters, but also all 
        % of the P model parameters. This will affect all of the 
        % derivatives w.r.t. P model parameters.Thi functionality is 
        % not currently built into this version of the carbon cycle model. 
        % (it was included in the version of eqCcycle.m published with 
        % Sullivan et al., 2024., but is not necessary for the current project.)
        % ---------------
        % sigP
        if (par.opt_sigP == on)
            tmp = [-d0((1-sigC-gamma)*RR*Gx(:,pindx.lsigP))*C2P; ... %error in this line?
                   d0((1-sigC-gamma)*Gx(:,pindx.lsigP))*C2P; ...
                   d0(sigC*Gx(:,pindx.lsigP))*C2P; ...
                   d0((1-sigC-gamma)*RR*Gx(:,pindx.lsigP))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lsigP))*C2P; ...
                   d0(-Gx(:,pindx.lsigP))*C2P; ...
                   Z] ;
            
            RHS(:,pindx.lsigP) = tmp  ;
        end

        % Q10P
        if (par.opt_Q10P == on)
            tmp = [-d0((1-sigC-gamma)*RR*Gx(:,pindx.lQ10P))*C2P; ...
                   d0((1-sigC-gamma)*Gx(:,pindx.lQ10P))*C2P; ...
                   d0(sigC*Gx(:,pindx.lQ10P))*C2P; ...
                   d0((1-sigC-gamma)*RR*Gx(:,pindx.lQ10P))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lQ10P))*C2P; ...
                   d0(-Gx(:,pindx.lQ10P))*C2P; ...
                   Z];
            
            RHS(:,pindx.lQ10P) =  tmp ;
        end
        
        % kdP
        if (par.opt_kdP == on)
            tmp = [-d0((1-sigC-gamma)*RR*Gx(:,pindx.lkdP))*C2P; ...
                   d0((1-sigC-gamma)*Gx(:,pindx.lkdP))*C2P; ...
                   d0(sigC*Gx(:,pindx.lkdP))*C2P; ...
                   d0((1-sigC-gamma)*RR*Gx(:,pindx.lkdP))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lkdP))*C2P ; ...
                   -d0(Gx(:,pindx.lkdP))*C2P; ...
                   Z];
            
            RHS(:,pindx.lkdP) = tmp;
        end
        
        % bP_T
        if (par.opt_bP_T == on)
            tmp = [-d0((1-sigC-gamma)*RR*Gx(:,pindx.bP_T))*C2P; ...
                   d0((1-sigC-gamma)*Gx(:,pindx.bP_T))*C2P; ...
                   d0(sigC*Gx(:,pindx.bP_T))*C2P; ...
                   d0((1-sigC-gamma)*RR*Gx(:,pindx.bP_T))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.bP_T))*C2P; ...
                   -d0(Gx(:,pindx.bP_T))*C2P; ...
                   Z];
            
            RHS(:,pindx.bP_T) = tmp;
        end
        
        % bP
        if (par.opt_bP == on)
            tmp = [-d0((1-sigC-gamma)*RR*Gx(:,pindx.lbP))*C2P;...
                   d0((1-sigC-gamma)*Gx(:,pindx.lbP))*C2P;...
                   d0(sigC*Gx(:,pindx.lbP))*C2P;...
                   d0((1-sigC-gamma)*RR*Gx(:,pindx.lbP))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lbP))*C2P; ...
                   -d0(Gx(:,pindx.lbP))*C2P; ...
                   Z];
            
            RHS(:,pindx.lbP) = tmp;
        end
        
        % alpha
        if (par.opt_alpha == on)
            tmp = [-d0((1-sigC-gamma)*RR*Gx(:,pindx.lalpha))*C2P; ...
                   d0((1-sigC-gamma)*Gx(:,pindx.lalpha))*C2P; ...
                   d0(sigC*Gx(:,pindx.lalpha))*C2P; ...
                   d0((1-sigC-gamma)*RR*Gx(:,pindx.lalpha))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lalpha))*C2P; ...
                   -d0(Gx(:,pindx.lalpha))*C2P; ...
                   Z];
            
            RHS(:,pindx.lalpha) = tmp;
        end
        
        % beta
        if (par.opt_beta == on)
            tmp = [-d0((1-sigC-gamma)*RR*Gx(:,pindx.lbeta))*C2P;...
                   d0((1-sigC-gamma)*Gx(:,pindx.lbeta))*C2P;...
                   d0(sigC*Gx(:,pindx.lbeta))*C2P;...
                   d0((1-sigC-gamma)*RR*Gx(:,pindx.lbeta))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lbeta))*C2P ; ...
                   -d0(Gx(:,pindx.lbeta))*C2P; ...
                   Z];
            
            RHS(:,pindx.lbeta) = tmp;
        end
        % ----------------- C model parameters ------------------
        % sigC
        if (par.opt_sigC == on)
            tmp = [sigC*RR*G*C2P  ; ...
                   -sigC*G*C2P    ; ...
                   sigC*G*C2P     ; ...
                   -sigC*RR*G*C2P ; ...
                   2*sigC*RR*G*C2P; ...
                   Z ; ...
                   Z] ;
            
            RHS(:,pindx.lsigC) = tmp;
        end
        % kru 
        if (par.opt_kru == on)
            tmp = kru*[UM*DOCr; Z; Z; Z; -N2C*UM*DOCr; Z; -UM*DOCr];
            
            RHS(:,pindx.lkru) = tmp;
        end
        
        % krd 
        if (par.opt_krd == on)
            tmp = krd*[DM*DOCr; Z; Z; Z; -N2C*DM*DOCr; Z; -DM*DOCr];
            
            RHS(:,pindx.lkrd) = tmp;
        end

        % etau 
        if (par.opt_etau == on)
            tmp = [etau*WM*(kC*DOC); ...
                   Z; ...
                   Z; ...
                   Z; ...
                   -etau*WM*N2C*(kC*DOC); ...
                   Z; ...
                   -etau*WM*(kC*DOC)];
            
            RHS(:,pindx.letau) = tmp;
        end

        % etad 
        if (par.opt_etad == on)
            tmp = [etad*DM*(kC*DOC); ...
                   Z; ...
                   Z; ...
                   Z; ...
                   -etad*N2C*DM*(kC*DOC); ...
                   Z; ...
                   -etad*DM*(kC*DOC)];
            
            RHS(:,pindx.letad) = tmp;
        end

        % bC_T
        if (par.opt_bC_T == on)
            [~,Gout]   = buildPFD(par,'POC');
            PFD_bm     = Gout.PFD_bm;
            par.PFD_bm = PFD_bm;
            tmp = [Z; -PFD_bm*POC; Z;  Z; Z; Z; Z];
            
            RHS(:,pindx.bC_T) = tmp;
        end
        
        % bC
        if (par.opt_bC == on)
            [~,Gout]   = buildPFD(par,'POC');
            PFD_bb     = Gout.PFD_bb;
            par.PFD_bb = PFD_bb;
            tmp = bC*[Z; -PFD_bb*POC; Z; Z; Z; Z; Z];
            
            RHS(:,pindx.lbC) = tmp;
        end

        % d
        if (par.opt_d == on)
            [~,Gout]  = buildPFD(par,'PIC');
            PFD_d     = Gout.PFD_d;
            par.PFD_d = PFD_d;
            tmp = d*[Z; Z; Z; -PFD_d*PIC; Z; Z; Z];
            
            RHS(:,pindx.ld) = tmp;
        end

        % Q10C
        if (par.opt_Q10C == on)
            kC_Q10C = kdC * Q10C .* Q10C.^(tf - 1) .* tf ; 
            par.kC_Q10C = kC_Q10C ;
            tmp = [eta*d0(kC_Q10C)*DOC; ...
                   Z; ...
                   -d0(kC_Q10C)*DOC; ...
                   Z; ...
                   -eta*N2C*d0(kC_Q10C)*DOC; ...
                   Z; ...
                   (I-eta)*d0(kC_Q10C)*DOC];
            
            RHS(:,pindx.lQ10C) = tmp;
        end
        
        % kdC
        if (par.opt_kdC == on)
            kC_kdC = kdC * d0(Q10C.^tf) ;
            par.kC_kdC = kC_kdC;
            tmp = [eta*kC_kdC*DOC; ...
                   Z; ...
                   -kC_kdC*DOC; ...
                   Z;  ...
                   -eta*N2C*kC_kdC*DOC; ...
                   Z; ...
                   (I-eta)*kC_kdC*DOC];
            
            RHS(:,pindx.lkdC) = tmp;
        end

        % R_Si
        if (par.opt_R_Si == on)
            tmp = [-(1-sigC-gamma)*RR_Si*(G*C2P); ...
                   Z; ...
                   Z; ...
                   (1-sigC-gamma)*RR_Si*(G*C2P); ...
                   -2*(1-sigC-gamma)*RR_Si*(G*C2P); ...
                   Z; ...
                   Z ];
            
            RHS(:,pindx.R_Si) = tmp;
        end
        
        % rR
        if (par.opt_rR == on)
            tmp = [-(1-sigC-gamma)*RR_rR*(G*C2P); ...
                   Z; ...
                   Z; ...
                   (1-sigC-gamma)*RR_rR*(G*C2P); ...
                   -2*(1-sigC-gamma)*RR_rR*(G*C2P); ...
                   Z; ...
                   Z];
            
            RHS(:,pindx.lrR) = tmp;
        end
        
        % cc
        if (par.opt_cc == on)
            tmp = cc*[-((1-sigC-gamma)*RR)*(G*C2P_cc); ...
                      (1-sigC-gamma)*G*C2P_cc; ...
                      sigC*G*C2P_cc; ...
                      (1-sigC-gamma)*RR*(G*C2P_cc); ...
                      -2*(1-sigC-gamma)*RR*(G*C2P_cc); ...
                      -G*C2P_cc; ...
                      Z];
            
            RHS(:,pindx.lcc) = tmp;
        end
        
        % dd
        if (par.opt_dd == on)
            tmp = dd*[-((1-sigC-gamma)*RR)*(G*C2P_dd); ...
                      (1-sigC-gamma)*G*C2P_dd; ...
                      sigC*G*C2P_dd; ...
                      (1-sigC-gamma)*RR*(G*C2P_dd); ...
                      -2*(1-sigC-gamma)*RR*(G*C2P_dd); ...
                      -G*C2P_dd; ...
                      Z];
            
            RHS(:,pindx.ldd) = tmp;
        end

        % other C2P model options
        if par.C2P_Tzmodel
            % ccT
            if (par.opt_ccT == on)
                % note: no log transform
                tmp = [-((1-sigC-gamma)*RR)*(G*C2P_ccT); ...
                    (1-sigC-gamma)*G*C2P_ccT; ...
                    sigC*G*C2P_ccT; ...
                    (1-sigC-gamma)*RR*(G*C2P_ccT); ...
                    -2*(1-sigC-gamma)*RR*(G*C2P_ccT); ...
                    -G*C2P_ccT; ...
                    Z];
          
                RHS(:,pindx.ccT) = tmp;
            end

            % ddT
            if (par.opt_ddT == on)
                tmp = ddT*[-((1-sigC-gamma)*RR)*(G*C2P_ddT); ...
                        (1-sigC-gamma)*G*C2P_ddT; ...
                        sigC*G*C2P_ddT; ...
                        (1-sigC-gamma)*RR*(G*C2P_ddT); ...
                        -2*(1-sigC-gamma)*RR*(G*C2P_ddT); ...
                        -G*C2P_ddT; ...
                        Z];
                
                RHS(:,pindx.lddT) = tmp;
            end
        end

        % ---------------- Cell model parameters ------------------
        % NOTE: C2Px(:,par.pindx.parameterName) contains derivatives w.r.t. value of x (for most, this is w.r.t the log of parameter value); 
        % already applied chain rule multiplication by d(Parameter)/d(logParameter) in eqC2Puptake.m
        if (par.Cellmodel == on)
            % Q10Photo
            if (par.opt_Q10Photo == on)
                C2P_lQ10Photo = C2Px(:,par.pindx.lQ10Photo);
                tmp = [-((1-sigC-gamma)*RR)*(G*C2P_lQ10Photo); ...
                    (1-sigC-gamma)*G*C2P_lQ10Photo; ...
                    sigC*G*C2P_lQ10Photo; ...
                    (1-sigC-gamma)*RR*(G*C2P_lQ10Photo); ...
                    -2*(1-sigC-gamma)*RR*(G*C2P_lQ10Photo); ...
                    -G*C2P_lQ10Photo; ...
                    Z];
          
                RHS(:,pindx.lQ10Photo) = tmp;
            end

            %  fStorage
            if (par.opt_fStorage == on) 
                C2P_lfStor = C2Px(:,par.pindx.lfStorage);
                tmp = [-((1-sigC-gamma)*RR)*(G*C2P_lfStor); ...
                    (1-sigC-gamma)*G*C2P_lfStor; ...
                    sigC*G*C2P_lfStor; ...
                    (1-sigC-gamma)*RR*(G*C2P_lfStor); ...
                    -2*(1-sigC-gamma)*RR*(G*C2P_lfStor); ...
                    -G*C2P_lfStor; ...
                    Z];
          
                RHS(:,pindx.lfStorage) = tmp;
            end

            %  SKIP: fRibE
            if (par.opt_fRibE == on) 
                C2P_tfRibE = C2Px(:,par.pindx.tfRibE);
                tmp = [-((1-sigC-gamma)*RR)*(G*C2P_tfRibE); ...
                    (1-sigC-gamma)*G*C2P_tfRibE; ...
                    sigC*G*C2P_tfRibE; ...
                    (1-sigC-gamma)*RR*(G*C2P_tfRibE); ...
                    -2*(1-sigC-gamma)*RR*(G*C2P_tfRibE); ...
                    -G*C2P_tfRibE; ...
                    Z];
          
                RHS(:,pindx.tfRibE) = tmp;
            end

            %  kST0
            if (par.opt_kST0 == on) 
                C2P_lkST0 = C2Px(:,par.pindx.lkST0);
                tmp = [-((1-sigC-gamma)*RR)*(G*C2P_lkST0); ...
                    (1-sigC-gamma)*G*C2P_lkST0; ...
                    sigC*G*C2P_lkST0; ...
                    (1-sigC-gamma)*RR*(G*C2P_lkST0); ...
                    -2*(1-sigC-gamma)*RR*(G*C2P_lkST0); ...
                    -G*C2P_lkST0; ...
                    Z];
          
                RHS(:,pindx.lkST0) = tmp;
            end
            %  SKIP: PLip_PCutoff
            %  SKIP: PLip_scale
            %  PStor_rCutoff
            if (par.opt_PStor_rCutoff == on) 
                C2P_lrCutoff = C2Px(:,par.pindx.lPStor_rCutoff);
                tmp = [-((1-sigC-gamma)*RR)*(G*C2P_lrCutoff); ...
                    (1-sigC-gamma)*G*C2P_lrCutoff; ...
                    sigC*G*C2P_lrCutoff; ...
                    (1-sigC-gamma)*RR*(G*C2P_lrCutoff); ...
                    -2*(1-sigC-gamma)*RR*(G*C2P_lrCutoff); ...
                    -G*C2P_lrCutoff; ...
                    Z];
          
                RHS(:,pindx.lPStor_rCutoff) = tmp;
            end
            % SKIP: PStor_scale
            % alphaS
            if (par.opt_alphaS == on) 
                C2P_lalphaS = C2Px(:,par.pindx.lalphaS);
                tmp = [-((1-sigC-gamma)*RR)*(G*C2P_lalphaS); ...
                    (1-sigC-gamma)*G*C2P_lalphaS; ...
                    sigC*G*C2P_lalphaS; ...
                    (1-sigC-gamma)*RR*(G*C2P_lalphaS); ...
                    -2*(1-sigC-gamma)*RR*(G*C2P_lalphaS); ...
                    -G*C2P_lalphaS; ...
                    Z];
          
                RHS(:,pindx.lalphaS) = tmp;
            end

            % SKIP: gamma_DNA
        end
        % solve
        Cx = mfactor(FD, RHS);
%        keyboard
        %save('../output/test_ccT_Cx.mat','Cx','X','Tz','ccT','ddT')
    end
    toc    

    fprintf('Compute the hessian of the solution wrt the parameters ...\n')
    tic
    if (par.optim == off)
        Cxx = [];
    elseif (par.optim & nargout > 3);
        if par.Cellmodel ==on %(using eqC2Puptake)
			C2Pxx  = par.C2Pxx;
		end
        if par.C2P_Tzmodel ==on
			p2c       = ccT*Tz + ddT;
        	C2P_dd_dd = 2./p2c.^3;
        	C2P_cc_cc = (2*Tz.^2)./p2c.^3;
        	C2P_cc_dd = (2*Tz)./p2c.^3;
		else
        	p2c       = cc*PO4 + dd;
        	C2P_dd_dd = 2./p2c.^3;
        	C2P_cc_cc = (2*PO4.^2)./p2c.^3;
        	C2P_cc_dd = (2*PO4)./p2c.^3;
        end
        % why saving to par?
        par.C2P_cc_cc = C2P_cc_cc;
        par.C2P_cc_dd = C2P_cc_dd;
        par.C2P_dd_dd = C2P_dd_dd;
        [~,~,Gxx] = uptake_C(par);
        par.Gxx   = Gxx;
        DICx  = Cx(0*nwet+1:1*nwet, : );
        POCx  = Cx(1*nwet+1:2*nwet, : );
        DOCx  = Cx(2*nwet+1:3*nwet, : );
        PICx  = Cx(3*nwet+1:4*nwet, : );
        ALKx  = Cx(4*nwet+1:5*nwet, : );
        DOClx = Cx(5*nwet+1:6*nwet, : );
        DOCrx = Cx(6*nwet+1:7*nwet, : );
        % ------------------------------------------------------
        % P model only parameters
        kk = 0;
        for jj = 1:npx
            for jk = jj:npx
                kk = kk + 1;
                % sigC foo
                tmp = [-d0(((1-sigC-gamma)*RR)*Gxx(:,kk))*C2P; ...
                       d0((1-sigC-gamma)*Gxx(:,kk))*C2P; ...
                       d0(sigC*Gxx(:,kk))*C2P; ...
                       d0((1-sigC-gamma)*RR*Gxx(:,kk))*C2P; ...
                       d0(-2*(1-sigC-gamma)*RR*Gxx(:,kk))*C2P; ...
                       -d0(Gxx(:,kk))*C2P; ...
                       Z];
                
                RHS(:,kk) = tmp;
            end 
        end
        
        % ------------------------------------------------------
        % P and  C model parameters
        % sigP sigC
        if (par.opt_sigP & par.opt_sigC)
            kk  = kk + 1;
            tmp = [+sigC*d0(RR*Gx(:,pindx.lsigP))*C2P ; ...
	           -sigC*d0(Gx(:,pindx.lsigP))*C2P    ; ...
                   +sigC*d0(Gx(:,pindx.lsigP))*C2P    ; ...
                   -sigC*d0(RR*Gx(:,pindx.lsigP))*C2P ; ...
	           2*sigC*d0(RR*Gx(:,pindx.lsigP))*C2P; ...
                   Z ; ...
	           Z] ;
            
	    RHS(:,kk) = tmp;
        end
        
        % sigP kru
        if (par.opt_sigP & par.opt_kru)
            kk  = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.lsigP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.lsigP); ...
                   Z; ...
                   -kru*UM*DOCrx(:,pindx.lsigP)];
            
            RHS(:,kk) = tmp;
        end

        % sigP krd
        if (par.opt_sigP & par.opt_krd)
            kk  = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.lsigP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.lsigP); ...
                   Z; ...
                   -krd*DM*DOCrx(:,pindx.lsigP)];
            
            RHS(:,kk) = tmp;
        end

        % sigP etau
        if (par.opt_sigP & par.opt_etau)
            kk  = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.lsigP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lsigP); ...
                   Z; ...
                   -etau*WM*kC*DOCx(:,pindx.lsigP)];
            
            RHS(:,kk) = tmp;
        end

        % sigP etad
        if (par.opt_sigP & par.opt_etad)
            kk  = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.lsigP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lsigP); ...
                   Z; ...
                   -etad*DM*kC*DOCx(:,pindx.lsigP)];
            
            RHS(:,kk) = tmp;
        end

        % sigP bC_T
        if (par.opt_sigP & par.opt_bC_T)
            kk  = kk + 1;
            tmp =  [Z; ...
                    -PFD_bm*POCx(:,pindx.lsigP) ; ...
                    Z; ...
                    Z; ...
                    Z; ...
                    Z; ...
                    Z];
            
            RHS(:,kk) = tmp;
        end
        
        % sigP bC
        if (par.opt_sigP & par.opt_bC)
            kk = kk + 1;
            tmp =  [Z ; ...
                    -bC*PFD_bb*POCx(:,pindx.lsigP); ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z];
            
            RHS(:,kk) = tmp;
        end

        % sigP d
        if (par.opt_sigP & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lsigP); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end

        % sigP Q10C
        if (par.opt_sigP & par.opt_Q10C)
            kk  = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lsigP); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lsigP); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lsigP); ...
                   Z; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lsigP)];
            
            RHS(:,kk) = tmp;
        end
        
        % sigP kdC
        if (par.opt_sigP & par.opt_kdC)
            kk  = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.lsigP); ...
                   Z; ...
                   -kC_kdC*DOCx(:,pindx.lsigP); ...
                   Z; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lsigP); ...
                   Z; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lsigP)];
            
            RHS(:,kk) = tmp;
        end
        
        % sigP R_Si
        if (par.opt_sigP & par.opt_R_Si)
            kk = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.lsigP))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.lsigP))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_Si*Gx(:,pindx.lsigP))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end

        % sigP rR
        if (par.opt_sigP & par.opt_rR)
            kk = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.lsigP))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.lsigP))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_rR*Gx(:,pindx.lsigP))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % sigP cc
        if (par.opt_sigP & par.opt_cc)
            kk  = kk + 1;
            tmp = cc*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lsigP))*C2P_cc; ...
                      d0((1-sigC-gamma)*Gx(:,pindx.lsigP))*C2P_cc; ... 
                      d0(sigC*Gx(:,pindx.lsigP))*C2P_cc; ... 
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lsigP))*C2P_cc; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lsigP))*C2P_cc ; ...
                      -d0(Gx(:,pindx.lsigP))*C2P_cc; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_sigP & par.opt_ccT)
            kk  = kk + 1;
            tmp = [-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lsigP))*C2P_ccT; ...
                      d0((1-sigC-gamma)*Gx(:,pindx.lsigP))*C2P_ccT; ... 
                      d0(sigC*Gx(:,pindx.lsigP))*C2P_ccT; ... 
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lsigP))*C2P_ccT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lsigP))*C2P_ccT ; ...
                      -d0(Gx(:,pindx.lsigP))*C2P_ccT; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % sigP dd
        if (par.opt_sigP & par.opt_dd)
            kk  = kk + 1;
            tmp = dd*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lsigP))*C2P_dd; ...
                      d0((1-sigC-gamma)*Gx(:,pindx.lsigP))*C2P_dd; ...
                      d0(sigC*Gx(:,pindx.lsigP))*C2P_dd; ... 
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lsigP))*C2P_dd; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lsigP))*C2P_dd; ...
                      -d0(Gx(:,pindx.lsigP))*C2P_dd; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_sigP & par.opt_ddT)
            kk  = kk + 1;
            tmp = ddT*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lsigP))*C2P_ddT; ...
                      d0((1-sigC-gamma)*Gx(:,pindx.lsigP))*C2P_ddT; ...
                      d0(sigC*Gx(:,pindx.lsigP))*C2P_ddT; ... 
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lsigP))*C2P_ddT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lsigP))*C2P_ddT; ...
                      -d0(Gx(:,pindx.lsigP))*C2P_ddT; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % Q10P sigC
        if (par.opt_Q10P & par.opt_sigC)
            kk  = kk + 1;
            tmp = [+sigC*d0(RR*Gx(:,pindx.lQ10P))*C2P  ; ...
                   -sigC*d0(Gx(:,pindx.lQ10P))*C2P    ; ...
	           +sigC*d0(Gx(:,pindx.lQ10P))*C2P     ; ...
                   -sigC*d0(RR*Gx(:,pindx.lQ10P))*C2P ; ...
                   2*sigC*d0(RR*Gx(:,pindx.lQ10P))*C2P; ...
                   Z ; ...
                   Z] ;
            
            RHS(:,kk) = tmp;
        end

        % Q10P kru
        if (par.opt_Q10P & par.opt_kru)
            kk  = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.lQ10P); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.lQ10P); ...
                   Z; ...
                   -kru*UM*DOCrx(:,pindx.lQ10P)];
            
            RHS(:,kk) = tmp;
        end

        % Q10P krd
        if (par.opt_Q10P & par.opt_krd)
            kk  = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.lQ10P); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.lQ10P); ...
                   Z; ...
                   -krd*DM*DOCrx(:,pindx.lQ10P)];
            
            RHS(:,kk) = tmp;
        end

        % Q10P etau
        if (par.opt_Q10P & par.opt_etau)
            kk  = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.lQ10P); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lQ10P); ...
                   Z; ...
                   -etau*WM*kC*DOCx(:,pindx.lQ10P)];
            
            RHS(:,kk) = tmp;
        end

        % Q10P etad
        if (par.opt_Q10P & par.opt_etad)
            kk  = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.lQ10P); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lQ10P); ...
                   Z; ...
                   -etad*DM*kC*DOCx(:,pindx.lQ10P)];
            
            RHS(:,kk) = tmp;
        end

        % Q10P bC_T
        if (par.opt_Q10P & par.opt_bC_T)
            kk  = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lQ10P); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % Q10P bC
        if (par.opt_Q10P & par.opt_bC)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.lQ10P); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ];
            
            RHS(:,kk) = tmp;
        end
        
        % Q10P d
        if (par.opt_Q10P & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lQ10P); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % Q10P Q10C
        if (par.opt_Q10P & par.opt_Q10C)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lQ10P); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lQ10P); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lQ10P); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lQ10P)];
            
            RHS(:,kk) = tmp;
        end
        
        % Q10P kdC
        if (par.opt_Q10P & par.opt_kdC)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.lQ10P); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.lQ10P); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lQ10P); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lQ10P)];
            
            RHS(:,kk) = tmp;
        end
        
        % Q10P R_Si
        if (par.opt_Q10P & par.opt_R_Si)
            kk = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.lQ10P))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.lQ10P))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_Si*Gx(:,pindx.lQ10P))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % Q10P RR_rR
        if (par.opt_Q10P & par.opt_rR)
            kk = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.lQ10P))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.lQ10P))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_rR*Gx(:,pindx.lQ10P))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % Q10P cc
        if (par.opt_Q10P & par.opt_cc)
            kk = kk + 1;
            tmp = cc*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lQ10P))*C2P_cc; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lQ10P))*C2P_cc; ...
                      sigC*d0(Gx(:,pindx.lQ10P))*C2P_cc; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lQ10P))*C2P_cc; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lQ10P))*C2P_cc; ...
                      -d0(Gx(:,pindx.lQ10P))*C2P_cc; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_Q10P & par.opt_ccT)
            kk = kk + 1;
            tmp = [-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lQ10P))*C2P_ccT; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lQ10P))*C2P_ccT; ...
                      sigC*d0(Gx(:,pindx.lQ10P))*C2P_ccT; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lQ10P))*C2P_ccT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lQ10P))*C2P_ccT; ...
                      -d0(Gx(:,pindx.lQ10P))*C2P_ccT; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % Q10P dd
        if (par.opt_Q10P & par.opt_dd)
            kk = kk + 1;
            tmp = dd*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lQ10P))*C2P_dd; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lQ10P))*C2P_dd; ...
                      sigC*d0(Gx(:,pindx.lQ10P))*C2P_dd; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lQ10P))*C2P_dd; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lQ10P))*C2P_dd ; ...
                      -d0(Gx(:,pindx.lQ10P))*C2P_dd; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_Q10P & par.opt_ddT)
            kk = kk + 1;
            tmp = ddT*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lQ10P))*C2P_ddT; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lQ10P))*C2P_ddT; ...
                      sigC*d0(Gx(:,pindx.lQ10P))*C2P_ddT; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lQ10P))*C2P_ddT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lQ10P))*C2P_ddT ; ...
                      -d0(Gx(:,pindx.lQ10P))*C2P_ddT; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % kdP sigC
        if (par.opt_kdP & par.opt_sigC)
            kk  = kk + 1;
            tmp = [+sigC*d0(RR*Gx(:,pindx.lkdP))*C2P  ; ...
                   -sigC*d0(Gx(:,pindx.lkdP))*C2P    ; ...
	           +sigC*d0(Gx(:,pindx.lkdP))*C2P     ; ...
                   -sigC*d0(RR*Gx(:,pindx.lkdP))*C2P ; ...
                   2*sigC*d0(RR*Gx(:,pindx.lkdP))*C2P; ...
                   Z ; ...
                   Z] ;
            
            RHS(:,kk) = tmp;
        end
        
        % kdP kru
        if (par.opt_kdP & par.opt_kru)
            kk  = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.lkdP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.lkdP); ...
                   Z; ...
                   -kru*UM*DOCrx(:,pindx.lkdP)];
            
            RHS(:,kk) = tmp;
        end

        % kdP krd
        if (par.opt_kdP & par.opt_krd)
            kk  = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.lkdP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.lkdP); ...
                   Z; ...
                   -krd*DM*DOCrx(:,pindx.lkdP)];
            
            RHS(:,kk) = tmp;
        end

        % kdP etau
        if (par.opt_kdP & par.opt_etau)
            kk  = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.lkdP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lkdP); ...
                   Z; ...
                   -etau*WM*kC*DOCx(:,pindx.lkdP)];
            
            RHS(:,kk) = tmp;
        end

        % kdP etad
        if (par.opt_kdP & par.opt_etad)
            kk  = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.lkdP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lkdP); ...
                   Z; ...
                   -etad*DM*kC*DOCx(:,pindx.lkdP)];
            
            RHS(:,kk) = tmp;
        end

        % kdP bC_T
        if (par.opt_kdP & par.opt_bC_T)
            kk = kk + 1;
            tmp =  [Z ; ...
                    -PFD_bm*POCx(:,pindx.lkdP); ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z];
            
            RHS(:,kk) = tmp;
        end
        
        % kdP bC
        if (par.opt_kdP & par.opt_bC)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.lkdP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % kdP d
        if (par.opt_kdP & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lkdP); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % kdP Q10C
        if (par.opt_kdP & par.opt_Q10C)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lkdP); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lkdP); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lkdP); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lkdP)];
            
            RHS(:,kk) = tmp;
        end
        
        % kdP kdC
        if (par.opt_kdP & par.opt_kdC)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.lkdP); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.lkdP); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lkdP); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lkdP)];
            
            RHS(:,kk) = tmp;
        end
        
        % kdP R_Si
        if (par.opt_kdP & par.opt_R_Si)
            kk  = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.lkdP))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.lkdP))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_Si*Gx(:,pindx.lkdP))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % kdP rR
        if (par.opt_kdP & par.opt_rR)
            kk  = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.lkdP))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.lkdP))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_rR*Gx(:,pindx.lkdP))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % kdP cc
        if (par.opt_kdP & par.opt_cc)
            kk  = kk + 1;
            tmp = cc*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lkdP))*C2P_cc; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lkdP))*C2P_cc; ...
                      sigC*d0(Gx(:,pindx.lkdP))*C2P_cc; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lkdP))*C2P_cc; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lkdP))*C2P_cc; ...
                      -d0(Gx(:,pindx.lkdP))*C2P_cc; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_kdP & par.opt_ccT)
            kk  = kk + 1;
            tmp = [-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lkdP))*C2P_ccT; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lkdP))*C2P_ccT; ...
                      sigC*d0(Gx(:,pindx.lkdP))*C2P_ccT; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lkdP))*C2P_ccT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lkdP))*C2P_ccT; ...
                      -d0(Gx(:,pindx.lkdP))*C2P_ccT; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % kdP dd
        if (par.opt_kdP & par.opt_dd)
            kk  = kk + 1;
            tmp = dd*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lkdP))*C2P_dd; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lkdP))*C2P_dd; ...
                      sigC*d0(Gx(:,pindx.lkdP))*C2P_dd; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lkdP))*C2P_dd; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lkdP))*C2P_dd; ...
                      -d0(Gx(:,pindx.lkdP))*C2P_dd; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_kdP & par.opt_ddT)
            kk  = kk + 1;
            tmp = ddT*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lkdP))*C2P_ddT; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lkdP))*C2P_ddT; ...
                      sigC*d0(Gx(:,pindx.lkdP))*C2P_ddT; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lkdP))*C2P_ddT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lkdP))*C2P_ddT; ...
                      -d0(Gx(:,pindx.lkdP))*C2P_ddT; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bP_T sigC
        if (par.opt_bP_T & par.opt_sigC)
            kk  = kk + 1;
            tmp = [+sigC*d0(RR*Gx(:,pindx.bP_T))*C2P  ; ...
                   -sigC*d0(Gx(:,pindx.bP_T))*C2P    ; ...
	           +sigC*d0(Gx(:,pindx.bP_T))*C2P     ; ...
                   -sigC*d0(RR*Gx(:,pindx.bP_T))*C2P ; ...
                   2*sigC*d0(RR*Gx(:,pindx.bP_T))*C2P; ...
                   Z ; ...
                   Z] ;
            
            RHS(:,kk) = tmp;
        end
        
        % bP_T kru
        if (par.opt_bP_T & par.opt_kru)
            kk  = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.bP_T); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.bP_T); ...
                   Z; ...
                   -kru*UM*DOCrx(:,pindx.bP_T)];
            
            RHS(:,kk) = tmp;
        end

        % bP_T krd
        if (par.opt_bP_T & par.opt_krd)
            kk  = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.bP_T); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.bP_T); ...
                   Z; ...
                   -krd*DM*DOCrx(:,pindx.bP_T)];
            
            RHS(:,kk) = tmp;
        end

        % bP_T etau
        if (par.opt_bP_T & par.opt_etau)
            kk  = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.bP_T); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.bP_T); ...
                   Z; ...
                   -etau*WM*kC*DOCx(:,pindx.bP_T)];
            
            RHS(:,kk) = tmp;
        end

        % bP_T etad
        if (par.opt_bP_T & par.opt_etad)
            kk  = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.bP_T); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.bP_T); ...
                   Z; ...
                   -etad*DM*kC*DOCx(:,pindx.bP_T)];
            
            RHS(:,kk) = tmp;
        end

        % bP_T bC_T
        if (par.opt_bP_T & par.opt_bC_T)
            kk  = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.bP_T); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bP_T bC
        if (par.opt_bP_T & par.opt_bC)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.bP_T); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bP_T d
        if (par.opt_bP_T & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.bP_T); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bP_T Q10C
        if (par.opt_bP_T & par.opt_Q10C)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.bP_T); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.bP_T); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.bP_T); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.bP_T)];
                   
            RHS(:,kk) = tmp;
        end
        
        % bP_T kdC
        if (par.opt_bP_T & par.opt_kdC)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.bP_T); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.bP_T); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.bP_T); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.bP_T)];
            
            RHS(:,kk) = tmp;
        end
        
        % bP_T R_Si
        if (par.opt_bP_T & par.opt_R_Si)
            kk = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.bP_T))*C2P ; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.bP_T))*C2P ; ...
                   d0(-2*(1-sigC-gamma)*RR_Si*Gx(:,pindx.bP_T))*C2P; ...
                   Z ; ...
                   Z] ;
            
            RHS(:,kk) = tmp;
        end
        
        % bP_T rR
        if (par.opt_bP_T & par.opt_rR)
            kk = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.bP_T))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.bP_T))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_rR*Gx(:,pindx.bP_T))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bP_T cc
        if (par.opt_bP_T & par.opt_cc)
            kk = kk + 1;
            tmp = cc*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.bP_T))*C2P_cc; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.bP_T))*C2P_cc; ...
                      sigC*d0(Gx(:,pindx.bP_T))*C2P_cc; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.bP_T))*C2P_cc; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.bP_T))*C2P_cc; ...
                      -d0(Gx(:,pindx.bP_T))*C2P_cc; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_bP_T & par.opt_ccT)
            kk = kk + 1;
            tmp = [-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.bP_T))*C2P_ccT; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.bP_T))*C2P_ccT; ...
                      sigC*d0(Gx(:,pindx.bP_T))*C2P_ccT; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.bP_T))*C2P_ccT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.bP_T))*C2P_ccT; ...
                      -d0(Gx(:,pindx.bP_T))*C2P_ccT; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bP_T dd
        if (par.opt_bP_T & par.opt_dd)
            kk = kk + 1;
            tmp = dd*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.bP_T))*C2P_dd; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.bP_T))*C2P_dd; ...
                      sigC*d0(Gx(:,pindx.bP_T))*C2P_dd; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.bP_T))*C2P_dd; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.bP_T))*C2P_dd ; ...
                      -d0(Gx(:,pindx.bP_T))*C2P_dd; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_bP_T & par.opt_ddT)
            kk = kk + 1;
            tmp = ddT*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.bP_T))*C2P_ddT; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.bP_T))*C2P_ddT; ...
                      sigC*d0(Gx(:,pindx.bP_T))*C2P_ddT; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.bP_T))*C2P_ddT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.bP_T))*C2P_ddT ; ...
                      -d0(Gx(:,pindx.bP_T))*C2P_ddT; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end

        % bP sigC
        if (par.opt_bP & par.opt_sigC)
            kk  = kk + 1;
            tmp = [+sigC*d0(RR*Gx(:,pindx.lbP))*C2P  ; ...
                   -sigC*d0(Gx(:,pindx.lbP))*C2P    ; ...
	           +sigC*d0(Gx(:,pindx.lbP))*C2P     ; ...
                   -sigC*d0(RR*Gx(:,pindx.lbP))*C2P ; ...
                   2*sigC*d0(RR*Gx(:,pindx.lbP))*C2P; ...
                   Z ; ...
                   Z] ;
            
            RHS(:,kk) = tmp;
        end

        % bP kru
        if (par.opt_bP & par.opt_kru)
            kk  = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.lbP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.lbP); ...
                   Z; ...
                   -kru*UM*DOCrx(:,pindx.lbP)];
            
            RHS(:,kk) = tmp;
        end

        % bP krd
        if (par.opt_bP & par.opt_krd)
            kk  = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.lbP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.lbP); ...
                   Z; ...
                   -krd*DM*DOCrx(:,pindx.lbP)];
            
            RHS(:,kk) = tmp;
        end

        % bP etau
        if (par.opt_bP & par.opt_etau)
            kk  = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.lbP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lbP); ...
                   Z; ...
                   -etau*WM*kC*DOCx(:,pindx.lbP)];
            
            RHS(:,kk) = tmp;
        end

        % bP etad
        if (par.opt_bP & par.opt_etad)
            kk  = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.lbP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lbP); ...
                   Z; ...
                   -etad*DM*kC*DOCx(:,pindx.lbP)];
            
            RHS(:,kk) = tmp;
        end

        % bP bC_T
        if (par.opt_bP & par.opt_bC_T)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lbP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bP bC
        if (par.opt_bP & par.opt_bC)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.lbP); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bP d
        if (par.opt_bP & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lbP); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bP Q10C
        if (par.opt_bP & par.opt_Q10C)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lbP); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lbP); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lbP); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lbP)];
            
            RHS(:,kk) = tmp;
        end
        
        % bP kdC
        if (par.opt_bP & par.opt_kdC)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.lbP); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.lbP); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lbP); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lbP)];
            
            RHS(:,kk) = tmp;
        end
        
        % bP R_Si
        if (par.opt_bP & par.opt_R_Si)
            kk = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.lbP))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.lbP))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_Si*Gx(:,pindx.lbP))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bP rR
        if (par.opt_bP & par.opt_rR)
            kk = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.lbP))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.lbP))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_rR*Gx(:,pindx.lbP))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bP cc
        if (par.opt_bP & par.opt_cc)
            kk = kk + 1;
            tmp = cc*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lbP))*C2P_cc; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lbP))*C2P_cc;...
                      sigC*d0(Gx(:,pindx.lbP))*C2P_cc;...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lbP))*C2P_cc; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lbP))*C2P_cc ; ...
                      -d0(Gx(:,pindx.lbP))*C2P_cc;...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_bP & par.opt_ccT)
            kk = kk + 1;
            tmp = [-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lbP))*C2P_ccT; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lbP))*C2P_ccT;...
                      sigC*d0(Gx(:,pindx.lbP))*C2P_ccT;...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lbP))*C2P_ccT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lbP))*C2P_ccT ; ...
                      -d0(Gx(:,pindx.lbP))*C2P_ccT;...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bP dd
        if (par.opt_bP & par.opt_dd)
            kk = kk + 1;
            tmp = dd*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lbP))*C2P_dd; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lbP))*C2P_dd;...
                      sigC*d0(Gx(:,pindx.lbP))*C2P_dd;...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lbP))*C2P_dd; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lbP))*C2P_dd; ...
                      -d0(Gx(:,pindx.lbP))*C2P_dd;...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_bP & par.opt_ddT)
            kk = kk + 1;
            tmp = ddT*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lbP))*C2P_ddT; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lbP))*C2P_ddT;...
                      sigC*d0(Gx(:,pindx.lbP))*C2P_ddT;...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lbP))*C2P_ddT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lbP))*C2P_ddT; ...
                      -d0(Gx(:,pindx.lbP))*C2P_ddT;...
                      Z];
            
            RHS(:,kk) = tmp;
        end

        % alpha sigC
        if (par.opt_alpha & par.opt_sigC)
            kk  = kk + 1;
            tmp = [+sigC*d0(RR*Gx(:,pindx.lalpha))*C2P  ; ...
                   -sigC*d0(Gx(:,pindx.lalpha))*C2P    ; ...
	           +sigC*d0(Gx(:,pindx.lalpha))*C2P     ; ...
                   -sigC*d0(RR*Gx(:,pindx.lalpha))*C2P ; ...
                   2*sigC*d0(RR*Gx(:,pindx.lalpha))*C2P; ...
                   Z ; ...
                   Z] ;
            
            RHS(:,kk) = tmp;
        end
          
        % alpha kru
        if (par.opt_alpha & par.opt_kru)
            kk  = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.lalpha); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.lalpha); ...
                   Z; ...
                   -kru*UM*DOCrx(:,pindx.lalpha)];
            
            RHS(:,kk) = tmp;
        end
        
        % alpha krd
        if (par.opt_alpha & par.opt_krd)
            kk  = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.lalpha); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.lalpha); ...
                   Z; ...
                   -krd*DM*DOCrx(:,pindx.lalpha)];
            
            RHS(:,kk) = tmp;
        end

        % alpha etau
        if (par.opt_alpha & par.opt_etau)
            kk  = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.lalpha); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lalpha); ...
                   Z; ...
                   -etau*WM*kC*DOCx(:,pindx.lalpha)];
            
            RHS(:,kk) = tmp;
        end

        % alpha etad
        if (par.opt_alpha & par.opt_etad)
            kk  = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.lalpha); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lalpha); ...
                   Z; ...
                   -etad*DM*kC*DOCx(:,pindx.lalpha)];
            
            RHS(:,kk) = tmp;
        end
        
        % alpha bC_T
        if (par.opt_alpha & par.opt_bC_T)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lalpha); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % alpha bC
        if (par.opt_alpha & par.opt_bC)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.lalpha); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % alpha d
        if (par.opt_alpha & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lalpha); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % alpha Q10C
        if (par.opt_alpha & par.opt_Q10C)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lalpha); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lalpha); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lalpha); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lalpha)];
            
            RHS(:,kk) = tmp;
        end
        
        % alpha kdC
        if (par.opt_alpha & par.opt_kdC)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.lalpha); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.lalpha); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lalpha); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lalpha);];
            
            RHS(:,kk) = tmp;
        end
        
        % alpha R_Si
        if (par.opt_alpha & par.opt_R_Si)
            kk  = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.lalpha))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.lalpha))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_Si*Gx(:,pindx.lalpha))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end

        % alpha rR
        if (par.opt_alpha & par.opt_rR)
            kk  = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.lalpha))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.lalpha))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_rR*Gx(:,pindx.lalpha))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % alpha cc
        if (par.opt_alpha & par.opt_cc)
            kk  = kk + 1;
            tmp = cc*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lalpha))*C2P_cc; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lalpha))*C2P_cc; ...
                      sigC*d0(Gx(:,pindx.lalpha))*C2P_cc; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lalpha))*C2P_cc; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lalpha))*C2P_cc; ...
                      -d0(Gx(:,pindx.lalpha))*C2P_cc; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_alpha & par.opt_ccT)
            kk  = kk + 1;
            tmp = [-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lalpha))*C2P_ccT; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lalpha))*C2P_ccT; ...
                      sigC*d0(Gx(:,pindx.lalpha))*C2P_ccT; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lalpha))*C2P_ccT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lalpha))*C2P_ccT; ...
                      -d0(Gx(:,pindx.lalpha))*C2P_ccT; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % alpha dd
        if (par.opt_alpha & par.opt_dd)
            kk = kk + 1;
            tmp = dd*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lalpha))*C2P_dd; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lalpha))*C2P_dd; ...
                      sigC*d0(Gx(:,pindx.lalpha))*C2P_dd; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lalpha))*C2P_dd; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lalpha))*C2P_dd; ...
                      -d0(Gx(:,pindx.lalpha))*C2P_dd; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_alpha & par.opt_ddT)
            kk = kk + 1;
            tmp = ddT*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lalpha))*C2P_ddT; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lalpha))*C2P_ddT; ...
                      sigC*d0(Gx(:,pindx.lalpha))*C2P_ddT; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lalpha))*C2P_ddT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lalpha))*C2P_ddT; ...
                      -d0(Gx(:,pindx.lalpha))*C2P_ddT; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end

        % beta sigC
        if (par.opt_beta & par.opt_sigC)
            kk  = kk + 1;
            tmp = [+sigC*d0(RR*Gx(:,pindx.lbeta))*C2P  ; ...
                   -sigC*d0(Gx(:,pindx.lbeta))*C2P    ; ...
	           +sigC*d0(Gx(:,pindx.lbeta))*C2P     ; ...
                   -sigC*d0(RR*Gx(:,pindx.lbeta))*C2P ; ...
                   2*sigC*d0(RR*Gx(:,pindx.lbeta))*C2P; ...
                   Z ; ...
                   Z] ;
            
            RHS(:,kk) = tmp;
        end
        
        % beta kru
        if (par.opt_beta & par.opt_kru)
            kk  = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.lbeta); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.lbeta); ...
                   Z; ...
                   -kru*UM*DOCrx(:,pindx.lbeta)];
            
            RHS(:,kk) = tmp;
        end

        % beta krd
        if (par.opt_beta & par.opt_krd)
            kk  = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.lbeta); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.lbeta); ...
                   Z; ...
                   -krd*DM*DOCrx(:,pindx.lbeta)];
            
            RHS(:,kk) = tmp;
        end

        % beta etau
        if (par.opt_beta & par.opt_etau)
            kk  = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.lbeta); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lbeta); ...
                   Z; ...
                   -etau*WM*kC*DOCx(:,pindx.lbeta)];
            
            RHS(:,kk) = tmp;
        end

        % beta etad
        if (par.opt_beta & par.opt_etad)
            kk  = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.lbeta); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lbeta); ...
                   Z; ...
                   -etad*DM*kC*DOCx(:,pindx.lbeta)];
            
            RHS(:,kk) = tmp;
        end

        % beta bC_T
        if (par.opt_beta & par.opt_bC_T)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lbeta); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % beta bC
        if (par.opt_beta & par.opt_bC)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.lbeta); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % beta d
        if (par.opt_beta & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lbeta); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % beta Q10C
        if (par.opt_beta & par.opt_Q10C)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lbeta); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lbeta); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lbeta); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lbeta)];
            
            RHS(:,kk) = tmp;
        end
        
        % beta kdC
        if (par.opt_beta & par.opt_kdC)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.lbeta); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.lbeta); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lbeta); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lbeta)];
            
            RHS(:,kk) = tmp;
        end
        
        % beta R_Si
        if (par.opt_beta & par.opt_R_Si)
            kk = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.lbeta))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_Si*Gx(:,pindx.lbeta))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_Si*Gx(:,pindx.lbeta))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end

        % beta rR
        if (par.opt_beta & par.opt_rR)
            kk = kk + 1;
            tmp = [-d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.lbeta))*C2P; ...
                   Z ; ...
                   Z ; ...
                   d0((1-sigC-gamma)*RR_rR*Gx(:,pindx.lbeta))*C2P; ...
                   d0(-2*(1-sigC-gamma)*RR_rR*Gx(:,pindx.lbeta))*C2P; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % beta cc
        if (par.opt_beta & par.opt_cc)
            kk = kk + 1;
            tmp = cc*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lbeta))*C2P_cc; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lbeta))*C2P_cc; ...
                      sigC*d0(Gx(:,pindx.lbeta))*C2P_cc; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lbeta))*C2P_cc; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lbeta))*C2P_cc ; ...
                      -d0(Gx(:,pindx.lbeta))*C2P_cc; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_beta & par.opt_ccT)
            kk = kk + 1;
            tmp = [-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lbeta))*C2P_ccT; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lbeta))*C2P_ccT; ...
                      sigC*d0(Gx(:,pindx.lbeta))*C2P_ccT; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lbeta))*C2P_ccT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lbeta))*C2P_ccT ; ...
                      -d0(Gx(:,pindx.lbeta))*C2P_ccT; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % beta dd
        if (par.opt_beta & par.opt_dd)
            kk = kk + 1;
            tmp = dd*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lbeta))*C2P_dd; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lbeta))*C2P_dd; ...
                      sigC*d0(Gx(:,pindx.lbeta))*C2P_dd; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lbeta))*C2P_dd; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lbeta))*C2P_dd ; ...
                      -d0(Gx(:,pindx.lbeta))*C2P_dd; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_beta & par.opt_ddT)
            kk = kk + 1;
            tmp = ddT*[-d0(((1-sigC-gamma)*RR)*Gx(:,pindx.lbeta))*C2P_ddT; ...
                      (1-sigC-gamma)*d0(Gx(:,pindx.lbeta))*C2P_ddT; ...
                      sigC*d0(Gx(:,pindx.lbeta))*C2P_ddT; ...
                      d0((1-sigC-gamma)*RR*Gx(:,pindx.lbeta))*C2P_ddT; ...
                      d0(-2*(1-sigC-gamma)*RR*Gx(:,pindx.lbeta))*C2P_ddT ; ...
                      -d0(Gx(:,pindx.lbeta))*C2P_ddT; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end

        % ------------------------------------------------------
        % P and  Cell model parameters
        if par.Cellmodel
            for jj = 1:npx
                for jk = npx+ncx+1:npx+ncx+nbx
                    kk = kk + 1;
                    % Note: this assumes cell model is not a function of P model parameters
                    tmp = [-d0(((1-sigC-gamma)*RR)*Gx(:,jj))*C2Px(:,jk); ...
                        d0((1-sigC-gamma)*Gx(:,jj))*C2Px(:,jk); ...
                        d0(sigC*Gx(:,jj))*C2Px(:,jk); ...
                        d0((1-sigC-gamma)*RR*Gx(:,jj))*C2Px(:,jk); ...
                        d0(-2*(1-sigC-gamma)*RR*Gx(:,jj))*C2Px(:,jk); ...
                        -d0(Gx(:,jj))*C2Px(:,jk); ...
                        Z];

                    RHS(:,kk) = tmp;
                end
            end
        end
        
        % ------------------------------------------------------
        % C model only parameters
        % sigC sigC
        if (par.opt_sigC == on)
            kk = kk + 1;
            tmp = [sigC*RR*G*C2P  ; ...
                   -sigC*G*C2P    ; ...
                   sigC*G*C2P     ; ...
                   -sigC*RR*G*C2P ; ...
                   2*sigC*RR*G*C2P; ...
                   Z ; ...
                   Z] ;
            
            RHS(:,kk) = tmp;
        end
        
        % sigC kru
        if (par.opt_sigC & par.opt_kru == on)
            kk = kk + 1;            
            tmp = kru*[UM*DOCrx(:,pindx.lsigC); ...
                       Z; ...
                       Z; ...
                       Z; ...
                       -N2C*UM*DOCrx(:,pindx.lsigC); ...
                       Z; ...
                       -UM*DOCrx(:,pindx.lsigC)];
            
            RHS(:,kk) = tmp;
        end

        % sigC krd
        if (par.opt_sigC & par.opt_krd == on)
            kk = kk + 1;
            tmp = krd*[DM*DOCrx(:,pindx.lsigC); ...
                       Z; ...
                       Z; ...
                       Z; ...
                       -N2C*DM*DOCrx(:,pindx.lsigC); ...
                       Z; ...
                       -DM*DOCrx(:,pindx.lsigC)];
            
            RHS(:,kk) = tmp;
        end

        % sigC etau
        if (par.opt_sigC & par.opt_etau == on)
            kk = kk + 1;
            tmp = [etau*WM*(kC*DOCx(:,pindx.lsigC)); ...
                   Z; ...
                   Z; ...
                   Z; ...
                   -etau*WM*N2C*(kC*DOCx(:,pindx.lsigC)); ...
                   Z; ...
                   -etau*WM*(kC*DOCx(:,pindx.lsigC))];
            
            RHS(:,kk) = tmp;
        end

        % sigC etad
        if (par.opt_sigC & par.opt_etad == on)
            kk = kk + 1;
            tmp = [etad*DM*(kC*DOCx(:,pindx.lsigC)); ...
                   Z; ...
                   Z; ...
                   Z; ...
                   -etad*N2C*DM*(kC*DOCx(:,pindx.lsigC)); ...
                   Z; ...
                   -etad*DM*(kC*DOCx(:,pindx.lsigC))];
            
            RHS(:,kk) = tmp;
        end

        % sigC bC_T
        if (par.opt_sigC & par.opt_bC_T == on)
            kk = kk + 1;
            tmp = [Z; -PFD_bm*POCx(:,pindx.lsigC); Z;  Z; Z; Z; Z];
            
            RHS(:,kk) = tmp;
        end
        
        % sigC bC
        if (par.opt_sigC & par.opt_bC == on)
            kk = kk + 1;
            tmp = bC*[Z; -PFD_bb*POCx(:,pindx.lsigC); Z;  Z; Z; Z; Z];
            
            RHS(:,kk) = tmp;
        end
        
        % sigC d
        if (par.opt_sigC & par.opt_d == on)
            kk = kk + 1;
            tmp = d*[Z; Z; Z; -PFD_d*PICx(:,pindx.lsigC); Z; Z; Z];
            
            RHS(:,kk) = tmp;
        end 
        % sigC Q10C
        if (par.opt_sigC & par.opt_Q10C == on)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lsigC); ...
                   Z; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lsigC); ...
                   Z; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lsigC); ...
                   Z; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lsigC)];
            
            RHS(:,kk) = tmp;
        end

        % sigC kdC
        if (par.opt_sigC & par.opt_kdC == on)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.lsigC); ...
                   Z; ...
                   -kC_kdC*DOCx(:,pindx.lsigC); ...
                   Z;  ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lsigC); ...
                   Z; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lsigC)];
            
            RHS(:,kk) = tmp;
        end

        % sigC R_Si
        if (par.opt_sigC & par.opt_R_Si == on)
            kk = kk + 1;
            tmp = [sigC*RR_Si*(G*C2P); ...
                   Z; ...
                   Z; ...
                   -sigC*RR_Si*(G*C2P); ...
                   2*sigC*RR_Si*(G*C2P); ...
                   Z; ...
                   Z ];
            
            RHS(:,kk) = tmp;
        end

        % sigC rR
        if (par.opt_sigC & par.opt_rR == on)
            kk = kk + 1;
            tmp = [sigC*RR_rR*(G*C2P); ...
                   Z; ...
                   Z; ...
                   -sigC*RR_rR*(G*C2P); ...
                   2*sigC*RR_rR*(G*C2P); ...
                   Z; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end

        % sigC cc
        if (par.opt_sigC & par.opt_cc == on)
            kk = kk + 1;
            tmp = cc*[sigC*RR*(G*C2P_cc); ...
                      -sigC*G*C2P_cc; ...
                      sigC*G*C2P_cc; ...
                      -sigC*RR*(G*C2P_cc); ...
                      2*sigC*RR*(G*C2P_cc) ; ...
                      Z ; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_sigC & par.opt_ccT == on)
            kk = kk + 1;
            tmp = [sigC*RR*(G*C2P_ccT); ...
                      -sigC*G*C2P_ccT; ...
                      sigC*G*C2P_ccT; ...
                      -sigC*RR*(G*C2P_ccT); ...
                      2*sigC*RR*(G*C2P_ccT) ; ...
                      Z ; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end

        % sigC dd
        if (par.opt_sigC & par.opt_dd == on)
            kk = kk + 1;
            tmp = dd*[sigC*RR*(G*C2P_dd); ...
                      -sigC*G*C2P_dd; ...
                      sigC*G*C2P_dd; ...
                      -sigC*RR*(G*C2P_dd); ...
                      2*sigC*RR*(G*C2P_dd) ; ...
                      Z ; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_sigC & par.opt_ddT == on)
            kk = kk + 1;
            tmp = ddT*[sigC*RR*(G*C2P_ddT); ...
                      -sigC*G*C2P_ddT; ...
                      sigC*G*C2P_ddT; ...
                      -sigC*RR*(G*C2P_ddT); ...
                      2*sigC*RR*(G*C2P_ddT) ; ...
                      Z ; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end

        % kru kru
        if (par.opt_kru)
            kk = kk + 1;
            tmp = [kru*UM*DOCr ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -N2C*kru*UM*DOCr; ...
                   Z ; ...
                   -kru*UM*DOCr] + ...
                  [2*kru*UM*DOCrx(:,pindx.lkru); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -2*N2C*kru*UM*DOCrx(:,pindx.lkru); ...
                   Z ; ...
                   -2*kru*UM*DOCrx(:,pindx.lkru)];
            
            RHS(:,kk) = tmp;
        end

        % kru krd
        if (par.opt_kru & par.opt_krd)
            kk = kk + 1;
            tmp = [kru*UM*UM*DOCrx(:,pindx.lkrd); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -N2C*kru*UM*DOCrx(:,pindx.lkrd); ...                   
                   Z ; ...
                   -kru*UM*UM*DOCrx(:,pindx.lkrd)] + ...
                  [krd*DM*DOCrx(:,pindx.lkru); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -N2C*krd*DM*DOCrx(:,pindx.lkru); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.lkru)];
            
            RHS(:,kk) = tmp;
        end

        % kru etau
        if (par.opt_kru & par.opt_etau)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.letau) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -N2C*kru*UM*DOCrx(:,pindx.letau); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.letau)] + ...
                  [etau*WM*kC*DOCx(:,pindx.lkru); ...
                   Z; ...
                   Z; ...
                   Z; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lkru); ...
                   Z; ...
                   -etau*WM*kC*DOCx(:,pindx.lkru)] ; 
            
            RHS(:,kk) = tmp;
        end

        % kru etad
        if (par.opt_kru & par.opt_etad)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.letad) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -N2C*kru*UM*DOCrx(:,pindx.letad); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.letad)] + ...
                  [etad*DM*kC*DOCx(:,pindx.lkru); ...
                   Z; ...
                   Z; ...
                   Z; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lkru); ...
                   Z; ...
                   -etad*DM*kC*DOCx(:,pindx.lkru)] ; 
            
            RHS(:,kk) = tmp;
        end

        % kru bC_T
        if (par.opt_kru & par.opt_bC_T)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.bC_T) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -N2C*kru*UM*DOCrx(:,pindx.bC_T); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.bC_T)] + ...
                  [Z ; ...
                   -PFD_bm*POCx(:,pindx.lkru) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ] ;
            
            RHS(:,kk) = tmp;
        end

        % kru bC
        if (par.opt_kru & par.opt_bC)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.lbC) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -N2C*kru*UM*DOCrx(:,pindx.lbC); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.lbC)] + ...
                  [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.lkru) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ] ;
            
            RHS(:,kk) = tmp;
        end

        % kru d
        if (par.opt_kru & par.opt_d)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.ld) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.ld); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.ld)] + ...
                  [Z ; ...
                   Z ; ... 
                   Z ; ...
                   -d*PFD_d*PICx(:, pindx.lkru) ; ...
                   Z ; ...
                   Z ; ...
                   Z ] ;
            
            RHS(:,kk) = tmp;
        end

        % kru Q10C
        if (par.opt_kru & par.opt_Q10C)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.lQ10C) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.lQ10C); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.lQ10C)] + ...
                  [eta*d0(kC_Q10C)*DOCx(:,pindx.lkru); ...
                   Z; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lkru); ...
                   Z; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lkru); ...
                   Z; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lkru)];
            
            RHS(:,kk) = tmp;
        end

        % kru kdC
        if (par.opt_kru & par.opt_kdC)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.lkdC) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.lkdC); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.lkdC)] + ...
                  [eta*kC_kdC*DOCx(:,pindx.lkru); ...
                   Z; ...
                   -kC_kdC*DOCx(:,pindx.lkru); ...
                   Z; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lkru); ...
                   Z; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lkru)];
            
            RHS(:,kk) = tmp;
        end

        % kru R_Si
        if (par.opt_kru & par.opt_R_Si)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.R_Si) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.R_Si); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.R_Si)] ;
            
            RHS(:,kk) = tmp;
        end

        % kru rR
        if (par.opt_kru & par.opt_rR)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.lrR) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.lrR); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.lrR)] ;
            
            RHS(:,kk) = tmp;
        end

        % kru cc
        if (par.opt_kru & par.opt_cc)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.lcc) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.lcc); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.lcc)] ;
            
            RHS(:,kk) = tmp;
        elseif (par.opt_kru & par.opt_ccT)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.ccT) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.ccT); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.ccT)] ;
            
            RHS(:,kk) = tmp;
        end

        % kru dd 
        if (par.opt_kru & par.opt_dd)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.ldd) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.ldd); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.ldd)] ;

            RHS(:,kk) = tmp;
        elseif (par.opt_kru & par.opt_ddT)
            kk = kk + 1;
            tmp = [kru*UM*DOCrx(:,pindx.lddT) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -kru*N2C*UM*DOCrx(:,pindx.lddT); ...
                   Z ; ...
                   -kru*UM*DOCrx(:,pindx.lddT)] ;

            RHS(:,kk) = tmp;
        end

        % krd krd
        if (par.opt_krd)
            kk = kk + 1;
            tmp = [krd*DM*DOCr ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -N2C*krd*DM*DOCr; ...
                   Z ; ...
                   -krd*DM*DOCr] + ...
                  [2*krd*DM*DOCrx(:,pindx.lkrd); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -2*N2C*krd*DM*DOCrx(:,pindx.lkrd); ...
                   Z ; ...
                   -2*krd*DM*DOCrx(:,pindx.lkrd)];
            
            RHS(:,kk) = tmp;
        end

        % krd etau
        if (par.opt_krd & par.opt_etau)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.letau) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -N2C*krd*DM*DOCrx(:,pindx.letau); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.letau)] + ...
                  [etau*WM*kC*DOCx(:,pindx.lkrd); ...
                   Z; ...
                   Z; ...
                   Z; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lkrd); ...
                   Z; ...
                   -etau*WM*kC*DOCx(:,pindx.lkrd)] ; 
            
            RHS(:,kk) = tmp;
        end

        % krd etad
        if (par.opt_krd & par.opt_etad)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.letad) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -N2C*krd*DM*DOCrx(:,pindx.letad); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.letad)] + ...
                  [etad*DM*kC*DOCx(:,pindx.lkrd); ...
                   Z; ...
                   Z; ...
                   Z; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lkrd); ...
                   Z; ...
                   -etad*DM*kC*DOCx(:,pindx.lkrd)] ; 
            
            RHS(:,kk) = tmp;
        end

        % krd bC_T
        if (par.opt_krd & par.opt_bC_T)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.bC_T) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -N2C*krd*DM*DOCrx(:,pindx.bC_T); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.bC_T)] + ...
                  [Z ; ...
                   -PFD_bm*POCx(:,pindx.lkrd) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ] ;
            
            RHS(:,kk) = tmp;
        end

        % krd bC
        if (par.opt_krd & par.opt_bC)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.lbC) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -N2C*krd*DM*DOCrx(:,pindx.lbC); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.lbC)] + ...
                  [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.lkrd) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ] ;
            
            RHS(:,kk) = tmp;
        end

        % krd d
        if (par.opt_krd & par.opt_d)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.ld) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.ld); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.ld)] + ...
                  [Z ; ...
                   Z ; ... 
                   Z ; ...
                   -d*PFD_d*PICx(:, pindx.lkrd) ; ...
                   Z ; ...
                   Z ; ...
                   Z ] ;
            
            RHS(:,kk) = tmp;
        end

        % krd Q10C
        if (par.opt_krd & par.opt_Q10C)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.lQ10C) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.lQ10C); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.lQ10C)] + ...
                  [eta*d0(kC_Q10C)*DOCx(:,pindx.lkrd); ...
                   Z; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lkrd); ...
                   Z; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lkrd); ...
                   Z; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lkrd)];
            
            RHS(:,kk) = tmp;
        end

        % krd kdC
        if (par.opt_krd & par.opt_kdC)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.lkdC) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.lkdC); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.lkdC)] + ...
                  [eta*kC_kdC*DOCx(:,pindx.lkrd); ...
                   Z; ...
                   -kC_kdC*DOCx(:,pindx.lkrd); ...
                   Z; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lkrd); ...
                   Z; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lkrd)];
            
            RHS(:,kk) = tmp;
        end

        % krd R_Si
        if (par.opt_krd & par.opt_R_Si)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.R_Si) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.R_Si); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.R_Si)] ;
            
            RHS(:,kk) = tmp;
        end

        % krd rR
        if (par.opt_krd & par.opt_rR)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.lrR) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.lrR); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.lrR)] ;
            
            RHS(:,kk) = tmp;
        end

        % krd cc
        if (par.opt_krd & par.opt_cc)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.lcc) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.lcc); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.lcc)] ;
            
            RHS(:,kk) = tmp;
        elseif (par.opt_krd & par.opt_ccT)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.ccT) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.ccT); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.ccT)] ;
            
            RHS(:,kk) = tmp;
        end

        % krd dd 
        if (par.opt_krd & par.opt_dd)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.ldd) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.ldd); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.ldd)] ;

            RHS(:,kk) = tmp;
        elseif (par.opt_krd & par.opt_ddT)
            kk = kk + 1;
            tmp = [krd*DM*DOCrx(:,pindx.lddT) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -krd*N2C*DM*DOCrx(:,pindx.lddT); ...
                   Z ; ...
                   -krd*DM*DOCrx(:,pindx.lddT)] ;

            RHS(:,kk) = tmp;
        end
        
        %%%%%%
        % etau etau
        if (par.opt_etau)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOC ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOC; ...
                   Z ; ...
                   -etau*WM*kC*DOC] + ...
                  [2*etau*WM*kC*DOCx(:,pindx.letau); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -2*etau*WM*N2C*kC*DOCx(:,pindx.letau); ...
                   Z ; ...
                   2*etau*WM*kC*DOCx(:,pindx.letau)];;
            
            RHS(:,kk) = tmp;
        end

        % etau etad
        if (par.opt_etau & par.opt_etad)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.letad); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.letad); ...
                   Z ; ...
                   etau*WM*kC*DOCx(:,pindx.letad)] + ...
                  [etad*DM*kC*DOCx(:,pindx.letau); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.letau); ...
                   Z ; ...
                   etad*DM*kC*DOCx(:,pindx.letau)];;
            
            RHS(:,kk) = tmp;
        end

        % etau bC_T
        if (par.opt_etau & par.opt_bC_T)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.bC_T) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.bC_T); ...
                   Z ; ...
                   -etau*WM*kC*DOCx(:,pindx.bC_T)] + ...
                  [Z ; ...
                   -PFD_bm*POCx(:,pindx.letau) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ] ;
            
            RHS(:,kk) = tmp;
        end

        % etau bC
        if (par.opt_etau & par.opt_bC)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.lbC) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lbC); ...
                   Z ; ...
                   -etau*WM*kC*DOCx(:,pindx.lbC)] + ...
                  [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.letau) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ] ;
            
            RHS(:,kk) = tmp;
        end

        % etau d
        if (par.opt_etau & par.opt_d)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.ld) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.ld); ...
                   Z ; ...
                   -etau*WM*kC*DOCx(:,pindx.ld)] + ...
                  [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.letau) ; ...
                   Z ; ...
                   Z ; ...
                   Z ] ;
            
            RHS(:,kk) = tmp;
        end

        % etau Q10C
        if (par.opt_etau & par.opt_Q10C)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.lQ10C) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lQ10C); ...
                   Z ; ...
                   -etau*WM*kC*DOCx(:,pindx.lQ10C)] + ...
                  [etau*WM*d0(kC_Q10C)*DOC; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*d0(kC_Q10C)*DOC; ...
                   Z ; ...
                   -etau*WM*d0(kC_Q10C)*DOC] + ...
                  [eta*d0(kC_Q10C)*DOCx(:,pindx.letau) ; ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.letau) ; ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.letau) ; ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.letau)] ;
            
            RHS(:,kk) = tmp;
        end

        % etau kdC
        if (par.opt_etau & par.opt_kdC)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.lkdC) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lkdC); ...
                   Z ; ...
                   -etau*WM*kC*DOCx(:,pindx.lkdC)] + ...
                  [etau*WM*kC_kdC*DOC; ...
                   Z ; ...
                   Z ; ...
                   Z; ...
                   -etau*WM*N2C*kC_kdC*DOC; ...
                   Z; ...
                   -etau*WM*kC_kdC*DOC] + ...
                  [eta*kC_kdC*DOCx(:,pindx.letau) ; ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.letau) ; ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.letau) ; ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.letau)] ;
            
            RHS(:,kk) = tmp;
        end

        % etau R_Si
        if (par.opt_etau & par.opt_R_Si)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.R_Si) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.R_Si); ...
                   Z ; ...
                   -etau*WM*kC*DOCx(:,pindx.R_Si)] ;
            
            RHS(:,kk) = tmp;
        end

        % etau rR
        if (par.opt_etau & par.opt_rR)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.lrR) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*kC*N2C*DOCx(:,pindx.lrR); ...
                   Z ; ...
                   -etau*WM*kC*DOCx(:,pindx.lrR)] ;
            
            RHS(:,kk) = tmp;
        end

        % etau cc
        if (par.opt_etau & par.opt_cc)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.lcc) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lcc); ...
                   Z ; ...
                   -etau*WM*kC*DOCx(:,pindx.lcc)] ;
            
            RHS(:,kk) = tmp;
        elseif (par.opt_etau & par.opt_ccT)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.ccT) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.ccT); ...
                   Z ; ...
                   -etau*WM*kC*DOCx(:,pindx.ccT)] ;
            
            RHS(:,kk) = tmp;
        end

        % etau dd 
        if (par.opt_etau & par.opt_dd)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.ldd) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.ldd); ...
                   Z ; ...
                   -etau*WM*kC*DOCx(:,pindx.ldd)] ;

            RHS(:,kk) = tmp;
        elseif (par.opt_etau & par.opt_ddT)
            kk = kk + 1;
            tmp = [etau*WM*kC*DOCx(:,pindx.lddT) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etau*WM*N2C*kC*DOCx(:,pindx.lddT); ...
                   Z ; ...
                   -etau*WM*kC*DOCx(:,pindx.lddT)] ;

            RHS(:,kk) = tmp;
        end
        
        %%%%%%
        % etad etad
        if (par.opt_etad)
            kk = kk + 1;
            tmp = [etad*DM*kC*DOC ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOC; ...
                   Z ; ...
                   -etad*DM*kC*DOC] + ...
                  [2*etad*DM*kC*DOCx(:,pindx.letad); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -2*etad*DM*N2C*kC*DOCx(:,pindx.letad); ...
                   Z ; ...
                   2*etad*DM*kC*DOCx(:,pindx.letad)];;
            
            RHS(:,kk) = tmp;
        end

        % etad bC_T
        if (par.opt_etad & par.opt_bC_T)
            kk = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.bC_T) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.bC_T); ...
                   Z ; ...
                   -etad*DM*kC*DOCx(:,pindx.bC_T)] + ...
                  [Z ; ...
                   -PFD_bm*POCx(:,pindx.letad) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ] ;
            
            RHS(:,kk) = tmp;
        end

        % etad bC
        if (par.opt_etad & par.opt_bC)
            kk = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.lbC) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lbC); ...
                   Z ; ...
                   -etad*DM*kC*DOCx(:,pindx.lbC)] + ...
                  [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.letad) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ] ;
            
            RHS(:,kk) = tmp;
        end

        % etad d
        if (par.opt_etad & par.opt_d)
            kk = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.ld) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.ld); ...
                   Z ; ...
                   -etad*DM*kC*DOCx(:,pindx.ld)] + ...
                  [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.letad) ; ...
                   Z ; ...
                   Z ; ...
                   Z ] ;
            
            RHS(:,kk) = tmp;
        end

        % etad Q10C
        if (par.opt_etad & par.opt_Q10C)
            kk = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.lQ10C) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lQ10C); ...
                   Z ; ...
                   -etad*DM*kC*DOCx(:,pindx.lQ10C)] + ...
                  [etad*DM*d0(kC_Q10C)*DOC; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*d0(kC_Q10C)*DOC; ...
                   Z ; ...
                   -etad*DM*d0(kC_Q10C)*DOC] + ...
                  [eta*d0(kC_Q10C)*DOCx(:,pindx.letad) ; ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.letad) ; ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.letad) ; ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.letad)] ;
            
            RHS(:,kk) = tmp;
        end

        % etad kdC
        if (par.opt_etad & par.opt_kdC)
            kk = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.lkdC) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lkdC); ...
                   Z ; ...
                   -etad*DM*kC*DOCx(:,pindx.lkdC)] + ...
                  [etad*DM*kC_kdC*DOC; ...
                   Z ; ...
                   Z ; ...
                   Z; ...
                   -etad*DM*N2C*kC_kdC*DOC; ...
                   Z; ...
                   -etad*DM*kC_kdC*DOC] + ...
                  [eta*kC_kdC*DOCx(:,pindx.letad) ; ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.letad) ; ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.letad) ; ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.letad)] ;
            
            RHS(:,kk) = tmp;
        end

        % etad R_Si
        if (par.opt_etad & par.opt_R_Si)
            kk = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.R_Si) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.R_Si); ...
                   Z ; ...
                   -etad*DM*kC*DOCx(:,pindx.R_Si)] ;
            
            RHS(:,kk) = tmp;
        end

        % etad rR
        if (par.opt_etad & par.opt_rR)
            kk = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.lrR) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*kC*N2C*DOCx(:,pindx.lrR); ...
                   Z ; ...
                   -etad*DM*kC*DOCx(:,pindx.lrR)] ;
            
            RHS(:,kk) = tmp;
        end

        % etad cc
        if (par.opt_etad & par.opt_cc)
            kk = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.lcc) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lcc); ...
                   Z ; ...
                   -etad*DM*kC*DOCx(:,pindx.lcc)] ;
            
            RHS(:,kk) = tmp;
        elseif (par.opt_etad & par.opt_ccT)
            kk = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.ccT) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.ccT); ...
                   Z ; ...
                   -etad*DM*kC*DOCx(:,pindx.ccT)] ;
            
            RHS(:,kk) = tmp;
        end

        % etad dd 
        if (par.opt_etad & par.opt_dd)
            kk = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.ldd) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.ldd); ...
                   Z ; ...
                   -etad*DM*kC*DOCx(:,pindx.ldd)] ;

            RHS(:,kk) = tmp;
        elseif (par.opt_etad & par.opt_ddT)
            kk = kk + 1;
            tmp = [etad*DM*kC*DOCx(:,pindx.lddT) ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   -etad*DM*N2C*kC*DOCx(:,pindx.lddT); ...
                   Z ; ...
                   -etad*DM*kC*DOCx(:,pindx.lddT)] ;

            RHS(:,kk) = tmp;
        end
        
        %%%%%%
        % bC_T bC_T
        if (par.opt_bC_T)
            kk = kk + 1;
            [~,~,Hout] = buildPFD(par,'POC');
            PFD_bm_bm = Hout.PFD_bm_bm;
            par.PFD_bm_bm = PFD_bm_bm;
            tmp = [Z ; ...
                   -PFD_bm_bm*POC-2*PFD_bm*POCx(:,pindx.bC_T);
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bC_T bC
        if (par.opt_bC_T & par.opt_bC)
            kk = kk + 1;
            [~,~,Hout] = buildPFD(par,'POC');
            PFD_bm_bb = Hout.PFD_bm_bb;
            par.PFD_bm_bb = PFD_bm_bb;
            tmp =  [Z ; ...
                    [-bC*PFD_bm_bb*POC - ...
                     PFD_bm*POCx(:,pindx.lbC) - ...
                     bC*PFD_bb*POCx(:,pindx.bC_T)];
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bC_T d
        if (par.opt_bC_T & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.ld); ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.bC_T); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bC_T Q10C
        if (par.opt_bC_T & par.opt_Q10C)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.bC_T) ; ...
                   -PFD_bm*POCx(:,pindx.lQ10C); ...
                   -d0(kC_Q10C)*DOCx(:,pindx.bC_T) ; ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.bC_T); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.bC_T)];
            
            RHS(:,kk) = tmp;
        end
        
        % bC_T kdC
        if (par.opt_bC_T & par.opt_kdC)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.bC_T) ; ...
                   -PFD_bm*POCx(:,pindx.lkdC); ...
                   -kC_kdC*DOCx(:,pindx.bC_T) ; ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.bC_T); ...
                   Z ;
                   (I-eta)*kC_kdC*DOCx(:,pindx.bC_T)];
            
            RHS(:,kk) = tmp;
        end
        
        % bC_T R_Si
        if (par.opt_bC_T & par.opt_R_Si)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.R_Si); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bC_T rR
        if (par.opt_bC_T & par.opt_rR)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lrR); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bC_T cc
        if (par.opt_bC_T & par.opt_cc)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lcc); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_bC_T & par.opt_ccT)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.ccT); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bC_T dd
        if (par.opt_bC_T & par.opt_dd)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.ldd); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_bC_T & par.opt_ddT)
            kk = kk + 1;
            tmp = [Z ; ...
                   -PFD_bm*POCx(:,pindx.lddT); ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        %%%%%%
        % bC bC
        if (par.opt_bC)
            kk = kk + 1;
            [~,~,Hout] = buildPFD(par,'POC');
            PFD_bb_bb = Hout.PFD_bb_bb;
            par.PFD_bb_bb = PFD_bb_bb;
            tmp = bC*[Z; ...
                      -PFD_bb*POC-bC*PFD_bb_bb*POC-2* ...
                      PFD_bb*POCx(:,pindx.lbC); ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bC d
        if (par.opt_bC & par.opt_d)
            kk = kk + 1;
            tmp = [Z ; ...
                   -bC*PFD_bb*POCx(:,pindx.ld); ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lbC); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bC Q10C
        if (par.opt_bC & par.opt_Q10C)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lbC); ...
                   -bC*PFD_bb*POCx(:,pindx.lQ10C); ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lbC); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lbC); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lbC)];
            
            RHS(:,kk) = tmp;
        end
        
        % bC kdC
        if (par.opt_bC & par.opt_kdC)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.lbC); ...
                   -bC*PFD_bb*POCx(:,pindx.lkdC); ...
                   -kC_kdC*DOCx(:,pindx.lbC); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lbC); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lbC)];
            
            RHS(:,kk) = tmp;
        end
        
        % bC R_Si
        if (par.opt_bC & par.opt_R_Si)
            kk = kk + 1;
            tmp = bC*[Z ; ...
                      -PFD_bb*POCx(:,pindx.R_Si); ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bC rR
        if (par.opt_bC & par.opt_rR)
            kk = kk + 1;
            tmp = bC*[Z ; ...
                      -PFD_bb*POCx(:,pindx.lrR); ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % bC cc
        if (par.opt_bC & par.opt_cc)
            kk = kk + 1;
            tmp = bC*[Z ; ...
                      -PFD_bb*POCx(:,pindx.lcc); ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_bC & par.opt_ccT)
            kk = kk + 1;
            tmp = bC*[Z ; ...
                      -PFD_bb*POCx(:,pindx.ccT); ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end 
        
        % bC dd
        if (par.opt_bC & par.opt_dd)
            kk = kk + 1;
            tmp = bC*[Z ; ...
                      -PFD_bb*POCx(:,pindx.ldd); ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_bC & par.opt_ddT)
            kk = kk + 1;
            tmp = bC*[Z ; ...
                      -PFD_bb*POCx(:,pindx.lddT); ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z ; ...
                      Z];
            
            RHS(:,kk) = tmp;
        end

        %%%%%%
        % d d
        if (par.opt_d & par.opt_d)
            kk = kk + 1;
            [~,~,Hout] = buildPFD(par,'PIC');
            PFD_d_d = Hout.PFD_d_d;
            par.PFD_d_d = PFD_d_d;
            tmp = d*[Z ; ...
                     Z ; ...
                     Z ; ...
                     [-PFD_d*PIC - d*PFD_d_d*PIC + ...
                      -2*PFD_d*PICx(:,pindx.ld)]; ...
                     Z ; ...
                     Z ; ...
                     Z];
            
            RHS(:,kk) = tmp;
        end
        
        % d Q10C
            if (par.opt_d & par.opt_Q10C)
                kk = kk + 1;
                tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.ld); ...
                       Z ; ...
                       -d0(kC_Q10C)*DOCx(:,pindx.ld); ...
                       -d*PFD_d*PICx(:,pindx.lQ10C); ...
                       -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.ld); ...
                       Z ; ...
                       (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.ld)];
                    
                RHS(:,kk) = tmp;
        end
        
        % d kdC
        if (par.opt_d & par.opt_kdC)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.ld); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.ld); ...
                   -d*PFD_d*PICx(:,pindx.lkdC); ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.ld); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.ld)];
            
            RHS(:,kk) = tmp;
        end
        
        % d R_Si
        if (par.opt_d & par.opt_R_Si)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.R_Si); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end

        % d rR
        if (par.opt_d & par.opt_rR)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lrR); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % d cc
        if (par.opt_d & par.opt_cc)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lcc); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_d & par.opt_ccT)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.ccT); ...
                   Z ; ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % d dd
        if (par.opt_d & par.opt_dd)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.ldd); ...
                   Z ; ...
                   Z ; ...
                   Z] ;
            
            RHS(:,kk) = tmp;
        elseif (par.opt_d & par.opt_ddT)
            kk = kk + 1;
            tmp = [Z ; ...
                   Z ; ...
                   Z ; ...
                   -d*PFD_d*PICx(:,pindx.lddT); ...
                   Z ; ...
                   Z ; ...
                   Z] ;
            
            RHS(:,kk) = tmp;
        end
        
        %%%%%%
        % Q10C Q10C
        if (par.opt_Q10C)
            kC_Q10C_Q10C = kC_Q10C + tf.*Q10C.^2.*kdC.*Q10C.^(tf - 2).*(tf - 1) ;
            par.kC_Q10C_Q10C = kC_Q10C_Q10C ;
            kk = kk + 1;
            tmp = [2*eta*d0(kC_Q10C)*DOCx(:,pindx.lQ10C); ...
                   Z ; ...
                   -2*d0(kC_Q10C)*DOCx(:,pindx.lQ10C); ...
                   Z ; ...
                   -2*eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lQ10C); ...
                   Z ; ...
                   2*(I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lQ10C)] + ...
                  [eta*d0(kC_Q10C_Q10C)*DOC; ...
                   Z ; ...
                   -d0(kC_Q10C_Q10C)*DOC; ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C_Q10C)*DOC; ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C_Q10C)*DOC];
            
            RHS(:,kk) = tmp;
        end
        
        % Q10C kdC
        if (par.opt_Q10C & par.opt_kdC)
            kC_kdC_Q10C = tf .* Q10C .* kdC .* Q10C.^(tf-1);
            par.kC_kdC_Q10C = kC_kdC_Q10C ;
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lkdC); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lkdC); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lkdC); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lkdC)] + ... 
                  [eta*kC_kdC*DOCx(:,pindx.lQ10C); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.lQ10C); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lQ10C); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lQ10C)] + ...
                  [eta*d0(kC_kdC_Q10C)*DOC; ...
                   Z ; ...
                   -d0(kC_kdC_Q10C)*DOC; ...
                   Z ; ...
                   -eta*N2C*d0(kC_kdC_Q10C)*DOC; ...
                   Z ; ...
                   (I-eta)*d0(kC_kdC_Q10C)*DOC];

            RHS(:,kk) = tmp;
        end

        % Q10C R_Si
        if (par.opt_Q10C & par.opt_R_Si)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.R_Si); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.R_Si); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.R_Si); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.R_Si)];
            
            RHS(:,kk) = tmp;
        end

        % Q10C rR
        if (par.opt_Q10C & par.opt_rR)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lrR); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lrR); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lrR); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lrR)];
            
            RHS(:,kk) = tmp;
        end
        
        % Q10C cc
        if (par.opt_Q10C & par.opt_cc)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lcc); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lcc); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lcc); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lcc)] ;
            
            RHS(:,kk) = tmp;
        elseif (par.opt_Q10C & par.opt_ccT)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.ccT); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.ccT); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.ccT); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.ccT)] ;
            
            RHS(:,kk) = tmp;
        end
        
        % Q10C dd
        if (par.opt_Q10C & par.opt_dd)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.ldd); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.ldd); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.ldd); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.ldd)];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_Q10C & par.opt_ddT)
            kk = kk + 1;
            tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lddT); ...
                   Z ; ...
                   -d0(kC_Q10C)*DOCx(:,pindx.lddT); ...
                   Z ; ...
                   -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lddT); ...
                   Z ; ...
                   (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lddT)];
            
            RHS(:,kk) = tmp;
        end
        
        %%%%%%
        % kdC kdC
        if (par.opt_kdC)
            kC_kdC_kdC = kC_kdC ;
            par.kC_kdC_kdC = kC_kdC_kdC ;
            kk = kk + 1;
            tmp = [eta*kC_kdC_kdC*DOC ; ...
                   Z ; ...
                   -kC_kdC_kdC*DOC ; ...
                   Z ; ...
                   -eta*N2C*kC_kdC_kdC*DOC; ...
                   Z ; ...
                   (I-eta)*kC_kdC_kdC*DOC] + ...
                  [2*eta*kC_kdC*DOCx(:,pindx.lkdC); ...
                   Z ; ...
                   -2*kC_kdC*DOCx(:,pindx.lkdC); ...
                   Z ; ...
                   -2*eta*N2C*kC_kdC*DOCx(:,pindx.lkdC); ...
                   Z ; ...
                   2*(I-eta)*kC_kdC*DOCx(:,pindx.lkdC)];;
            
            RHS(:,kk) = tmp;
        end
        
        % kdC R_Si
        if (par.opt_kdC & par.opt_R_Si)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.R_Si); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.R_Si); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.R_Si); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.R_Si)];
            
            RHS(:,kk) = tmp;
        end

        % kdC rR
        if (par.opt_kdC & par.opt_rR)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.lrR); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.lrR); ...
                   Z ; ...
                   -eta*kC_kdC*N2C*DOCx(:,pindx.lrR); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lrR)];
            
            RHS(:,kk) = tmp;
        end
        
        % kdC cc
        if (par.opt_kdC & par.opt_cc)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.lcc); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.lcc); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lcc); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lcc)] ;
            
            RHS(:,kk) = tmp;
        elseif (par.opt_kdC & par.opt_ccT)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.ccT); ...
                   Z ; ...
                   -kC_kdC*DOCx(:,pindx.ccT); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.ccT); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.ccT)] ;
            
            RHS(:,kk) = tmp;
        end
        
        % kdC dd
        if (par.opt_kdC & par.opt_dd)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.ldd); ...
                   Z; ...
                   -kC_kdC*DOCx(:,pindx.ldd); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.ldd); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.ldd)];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_kdC & par.opt_ddT)
            kk = kk + 1;
            tmp = [eta*kC_kdC*DOCx(:,pindx.lddT); ...
                   Z; ...
                   -kC_kdC*DOCx(:,pindx.lddT); ...
                   Z ; ...
                   -eta*N2C*kC_kdC*DOCx(:,pindx.lddT); ...
                   Z ; ...
                   (I-eta)*kC_kdC*DOCx(:,pindx.lddT)];
            
            RHS(:,kk) = tmp;
        end

        %%%%%%
        % R_Si R_Si
        if (par.opt_R_Si)
            kk = kk + 1;
            tmp = [Z ; Z ; Z ; Z ; Z; Z; Z];
            
            RHS(:,kk) = tmp;
        end

        % R_Si rR
        if (par.opt_R_Si & par.opt_rR)
            kk = kk + 1;
            tmp = [Z; Z; Z; Z; Z; Z; Z];
            
            RHS(:,kk) = tmp;
        end
        
        % R_Si cc
        if (par.opt_R_Si & par.opt_cc)
            kk = kk + 1;
            tmp = [-cc*(1-sigC-gamma)*RR_Si*(G*C2P_cc); ...
                   Z ; ...
                   Z ; ...
                   cc*(1-sigC-gamma)*RR_Si*(G*C2P_cc); ...
                   -2*cc*(1-sigC-gamma)*RR_Si*(G*C2P_cc); ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_R_Si & par.opt_ccT)
            kk = kk + 1;
            tmp = [-1*(1-sigC-gamma)*RR_Si*(G*C2P_ccT); ...
                   Z ; ...
                   Z ; ...
                   (1-sigC-gamma)*RR_Si*(G*C2P_ccT); ...
                   -2*(1-sigC-gamma)*RR_Si*(G*C2P_ccT); ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % R_Si dd
        if (par.opt_R_Si & par.opt_dd)
            kk = kk + 1;
            tmp = [-dd*(1-sigC-gamma)*RR_Si*(G*C2P_dd); ...
                   Z ; ...
                   Z ; ...
                   dd*(1-sigC-gamma)*RR_Si*(G*C2P_dd); ...
                   -2*dd*(1-sigC-gamma)*RR_Si*(G*C2P_dd); ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_R_Si & par.opt_ddT)
            kk = kk + 1;
            tmp = [-ddT*(1-sigC-gamma)*RR_Si*(G*C2P_ddT); ...
                   Z ; ...
                   Z ; ...
                   ddT*(1-sigC-gamma)*RR_Si*(G*C2P_ddT); ...
                   -2*ddT*(1-sigC-gamma)*RR_Si*(G*C2P_ddT); ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % rR rR
        if (par.opt_rR)
            kk = kk + 1;
            tmp = [-(1-sigC-gamma)*RR_rR*(G*C2P); ...
                   Z ; ...
                   Z ; ...
                   (1-sigC-gamma)*RR_rR*(G*C2P); ...
                   -2*(1-sigC-gamma)*RR_rR*(G*C2P); ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % rR cc
        if (par.opt_rR & par.opt_cc)
            kk = kk + 1;
            tmp = [-cc*(1-sigC-gamma)*RR_rR*(G*C2P_cc); ...
                   Z ; ...
                   Z ; ...
                   cc*(1-sigC-gamma)*RR_rR*(G*C2P_cc); ...
                   -2*cc*(1-sigC-gamma)*RR_rR*(G*C2P_cc); ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_rR & par.opt_ccT)
            kk = kk + 1;
            tmp = [-(1-sigC-gamma)*RR_rR*(G*C2P_ccT); ...
                   Z ; ...
                   Z ; ...
                   (1-sigC-gamma)*RR_rR*(G*C2P_ccT); ...
                   -2*(1-sigC-gamma)*RR_rR*(G*C2P_ccT); ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        % rR dd
        if (par.opt_rR & par.opt_dd)
            kk = kk + 1;
            tmp = [-dd*(1-sigC-gamma)*RR_rR*(G*C2P_dd); ...
                   Z ; ...
                   Z ; ...
                   dd*(1-sigC-gamma)*RR_rR*(G*C2P_dd); ...
                   -2*dd*(1-sigC-gamma)*RR_rR*(G*C2P_dd); ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_rR & par.opt_ddT)
            kk = kk + 1;
            tmp = [-ddT*(1-sigC-gamma)*RR_rR*(G*C2P_ddT); ...
                   Z ; ...
                   Z ; ...
                   ddT*(1-sigC-gamma)*RR_rR*(G*C2P_ddT); ...
                   -2*ddT*(1-sigC-gamma)*RR_rR*(G*C2P_ddT); ...
                   Z ; ...
                   Z];
            
            RHS(:,kk) = tmp;
        end
        
        %%%%%%%
        % cc cc
        if (par.opt_cc)
            kk = kk + 1;
            tmp = cc*[-((1-sigC-gamma)*RR)*(G*(C2P_cc+cc*C2P_cc_cc)); ...
                      (1-sigC-gamma)*G*(C2P_cc+cc*C2P_cc_cc); ...
                      sigC*G*(C2P_cc+cc*C2P_cc_cc); ...
                      (1-sigC-gamma)*RR*(G*(C2P_cc+cc*C2P_cc_cc)); ...
                      -2*(1-sigC-gamma)*RR*(G*(C2P_cc+cc*C2P_cc_cc)) ; ...
                      -G*(C2P_cc+cc*C2P_cc_cc); ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_ccT)
            kk = kk + 1;
            tmp = [-((1-sigC-gamma)*RR)*(G*(C2P_cc_cc)); ...
                      (1-sigC-gamma)*G*(C2P_cc_cc); ...
                      sigC*G*(C2P_cc_cc); ...
                      (1-sigC-gamma)*RR*(G*(C2P_cc_cc)); ...
                      -2*(1-sigC-gamma)*RR*(G*(C2P_cc_cc)) ; ...
                      -G*(C2P_cc_cc); ...
                      Z];
            
            RHS(:,kk) = tmp;
        end
        
        % cc dd
        if (par.opt_cc & par.opt_dd)
            kk = kk + 1;
            tmp = cc*dd*[-((1-sigC-gamma)*RR)*(G*C2P_cc_dd); ...
                         (1-sigC-gamma)*G*C2P_cc_dd; ...
                         sigC*G*C2P_cc_dd; ...
                         (1-sigC-gamma)*RR*(G*C2P_cc_dd); ...
                         -2*(1-sigC-gamma)*RR*(G*C2P_cc_dd) ; ...
                         -G*C2P_cc_dd; ...
                         Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_ccT & par.opt_ddT)
            kk = kk + 1;
            tmp = ddT*[-((1-sigC-gamma)*RR)*(G*C2P_cc_dd); ...
                         (1-sigC-gamma)*G*C2P_cc_dd; ...
                         sigC*G*C2P_cc_dd; ...
                         (1-sigC-gamma)*RR*(G*C2P_cc_dd); ...
                         -2*(1-sigC-gamma)*RR*(G*C2P_cc_dd) ; ...
                         -G*C2P_cc_dd; ...
                         Z];
            
            RHS(:,kk) = tmp;
        end
        
        % dd dd
        if (par.opt_dd)
            kk = kk + 1;
            tmp = dd*[-((1-sigC-gamma)*RR)*(G*(C2P_dd+dd*C2P_dd_dd)); ...
                      (1-sigC-gamma)*G*(C2P_dd+dd*C2P_dd_dd); ...
                      sigC*G*(C2P_dd+dd*C2P_dd_dd); ...
                      (1-sigC-gamma)*RR*(G*(C2P_dd+dd*C2P_dd_dd)); ...
                      -2*(1-sigC-gamma)*RR*(G*(C2P_dd+dd*C2P_dd_dd)); ...
                      -G*(C2P_dd+dd*C2P_dd_dd); ...
                      Z];
            
            RHS(:,kk) = tmp;
        elseif (par.opt_ddT)
            kk = kk + 1;
            tmp = ddT*[-((1-sigC-gamma)*RR)*(G*(C2P_ddT+ddT*C2P_dd_dd)); ...
                      (1-sigC-gamma)*G*(C2P_ddT+ddT*C2P_dd_dd); ...
                      sigC*G*(C2P_ddT+ddT*C2P_dd_dd); ...
                      (1-sigC-gamma)*RR*(G*(C2P_ddT+ddT*C2P_dd_dd)); ...
                      -2*(1-sigC-gamma)*RR*(G*(C2P_ddT+ddT*C2P_dd_dd)); ...
                      -G*(C2P_ddT+ddT*C2P_dd_dd); ...
                      Z];
            
            RHS(:,kk) = tmp;
        end

        % ------------------------------------------------------
        % C and Cell model parameters
        if (par.Cellmodel == on)
            % sigC Q10Photo
            if (par.opt_sigC & par.opt_Q10Photo == on)
                kk = kk + 1;
                %C2P_lQ10Photo = C2Px(:,par.pindx.lQ10Photo);
                %C2P_dxtmp = C2P_lQ10Photo;
                C2P_dxtmp = C2Px(:,par.pindx.lQ10Photo);
                tmp = [sigC*RR*(G*C2P_dxtmp); ...
                        -sigC*G*C2P_dxtmp; ...
                        sigC*G*C2P_dxtmp; ...
                        -sigC*RR*(G*C2P_dxtmp); ...
                        2*sigC*RR*(G*C2P_dxtmp) ; ...
                        Z ; ...
                        Z];
                
                RHS(:,kk) = tmp;
            end

            % sigC fStorage
            if (par.opt_sigC & par.opt_fStorage == on)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lfStorage);
                tmp = [sigC*RR*(G*C2P_dxtmp); ...
                        -sigC*G*C2P_dxtmp; ...
                        sigC*G*C2P_dxtmp; ...
                        -sigC*RR*(G*C2P_dxtmp); ...
                        2*sigC*RR*(G*C2P_dxtmp) ; ...
                        Z ; ...
                        Z];
                
                RHS(:,kk) = tmp;
            end

            % SKIP: sigC fStorage

            % sigC kST0
            if (par.opt_sigC & par.opt_kST0 == on)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lkST0);
                tmp = [sigC*RR*(G*C2P_dxtmp); ...
                        -sigC*G*C2P_dxtmp; ...
                        sigC*G*C2P_dxtmp; ...
                        -sigC*RR*(G*C2P_dxtmp); ...
                        2*sigC*RR*(G*C2P_dxtmp) ; ...
                        Z ; ...
                        Z];
                
                RHS(:,kk) = tmp;
            end

            % sigC PStor_rCutoff
            if (par.opt_sigC & par.opt_PStor_rCutoff == on)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lPStor_rCutoff);
                tmp = [sigC*RR*(G*C2P_dxtmp); ...
                        -sigC*G*C2P_dxtmp; ...
                        sigC*G*C2P_dxtmp; ...
                        -sigC*RR*(G*C2P_dxtmp); ...
                        2*sigC*RR*(G*C2P_dxtmp) ; ...
                        Z ; ...
                        Z];
                
                RHS(:,kk) = tmp;
            end

            % sigC alphaS
            if (par.opt_sigC & par.opt_alphaS == on)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lalphaS);
                tmp = [sigC*RR*(G*C2P_dxtmp); ...
                        -sigC*G*C2P_dxtmp; ...
                        sigC*G*C2P_dxtmp; ...
                        -sigC*RR*(G*C2P_dxtmp); ...
                        2*sigC*RR*(G*C2P_dxtmp) ; ...
                        Z ; ...
                        Z];
                
                RHS(:,kk) = tmp;
            end

            % kru Q10Photo
            if (par.opt_kru & par.opt_Q10Photo)
                kk = kk + 1;
                tmp = [kru*UM*DOCrx(:,pindx.lQ10Photo) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -kru*N2C*UM*DOCrx(:,pindx.lQ10Photo); ...
                    Z ; ...
                    -kru*UM*DOCrx(:,pindx.lQ10Photo)] ;

                RHS(:,kk) = tmp;
            end

            % kru fStorage
            if (par.opt_kru & par.opt_fStorage)
                kk = kk + 1;
                tmp = [kru*UM*DOCrx(:,pindx.lfStorage) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -kru*N2C*UM*DOCrx(:,pindx.lfStorage); ...
                    Z ; ...
                    -kru*UM*DOCrx(:,pindx.lfStorage)] ;

                RHS(:,kk) = tmp;
            end

            % kru kST0
            if (par.opt_kru & par.opt_kST0)
                kk = kk + 1;
                tmp = [kru*UM*DOCrx(:,pindx.lkST0) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -kru*N2C*UM*DOCrx(:,pindx.lkST0); ...
                    Z ; ...
                    -kru*UM*DOCrx(:,pindx.lkST0)] ;

                RHS(:,kk) = tmp;
            end

            % kru PStor_rCutoff
            if (par.opt_kru & par.opt_PStor_rCutoff)
                kk = kk + 1;
                tmp = [kru*UM*DOCrx(:,pindx.lPStor_rCutoff) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -kru*N2C*UM*DOCrx(:,pindx.lPStor_rCutoff); ...
                    Z ; ...
                    -kru*UM*DOCrx(:,pindx.lPStor_rCutoff)] ;

                RHS(:,kk) = tmp;
            end

            % kru alphaS
            if (par.opt_kru & par.opt_alphaS)
                kk = kk + 1;
                tmp = [kru*UM*DOCrx(:,pindx.lalphaS) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -kru*N2C*UM*DOCrx(:,pindx.lalphaS); ...
                    Z ; ...
                    -kru*UM*DOCrx(:,pindx.lalphaS)] ;

                RHS(:,kk) = tmp;
            end

            % krd Q10Photo 
            if (par.opt_krd & par.opt_Q10Photo)
                kk = kk + 1;
                tmp = [krd*DM*DOCrx(:,pindx.lQ10Photo) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -krd*N2C*DM*DOCrx(:,pindx.lQ10Photo); ...
                    Z ; ...
                    -krd*DM*DOCrx(:,pindx.lQ10Photo)] ;

                RHS(:,kk) = tmp;
            end

            % krd fStorage 
            if (par.opt_krd & par.opt_fStorage)
                kk = kk + 1;
                tmp = [krd*DM*DOCrx(:,pindx.lfStorage) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -krd*N2C*DM*DOCrx(:,pindx.lfStorage); ...
                    Z ; ...
                    -krd*DM*DOCrx(:,pindx.lfStorage)] ;

                RHS(:,kk) = tmp;
            end

            % krd kST0 
            if (par.opt_krd & par.opt_kST0)
                kk = kk + 1;
                tmp = [krd*DM*DOCrx(:,pindx.lkST0) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -krd*N2C*DM*DOCrx(:,pindx.lkST0); ...
                    Z ; ...
                    -krd*DM*DOCrx(:,pindx.lkST0)] ;

                RHS(:,kk) = tmp;
            end

            % krd PStor_rCutoff 
            if (par.opt_krd & par.opt_PStor_rCutoff)
                kk = kk + 1;
                tmp = [krd*DM*DOCrx(:,pindx.lPStor_rCutoff) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -krd*N2C*DM*DOCrx(:,pindx.lPStor_rCutoff); ...
                    Z ; ...
                    -krd*DM*DOCrx(:,pindx.lPStor_rCutoff)] ;

                RHS(:,kk) = tmp;
            end

            % krd alphaS 
            if (par.opt_krd & par.opt_alphaS)
                kk = kk + 1;
                tmp = [krd*DM*DOCrx(:,pindx.lalphaS) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -krd*N2C*DM*DOCrx(:,pindx.lalphaS); ...
                    Z ; ...
                    -krd*DM*DOCrx(:,pindx.lalphaS)] ;

                RHS(:,kk) = tmp;
            end

            % etau Q10Photo 
            if (par.opt_etau & par.opt_Q10Photo)
                kk = kk + 1;
                tmp = [etau*WM*kC*DOCx(:,pindx.lQ10Photo) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -etau*WM*N2C*kC*DOCx(:,pindx.lQ10Photo); ...
                    Z ; ...
                    -etau*WM*kC*DOCx(:,pindx.lQ10Photo)] ;

                RHS(:,kk) = tmp;
            end

            % etau fStorage 
            if (par.opt_etau & par.opt_fStorage)
                kk = kk + 1;
                tmp = [etau*WM*kC*DOCx(:,pindx.lfStorage) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -etau*WM*N2C*kC*DOCx(:,pindx.lfStorage); ...
                    Z ; ...
                    -etau*WM*kC*DOCx(:,pindx.lfStorage)] ;

                RHS(:,kk) = tmp;
            end

            % etau kST0 
            if (par.opt_etau & par.opt_kST0)
                kk = kk + 1;
                tmp = [etau*WM*kC*DOCx(:,pindx.lkST0) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -etau*WM*N2C*kC*DOCx(:,pindx.lkST0); ...
                    Z ; ...
                    -etau*WM*kC*DOCx(:,pindx.lkST0)] ;

                RHS(:,kk) = tmp;
            end

            % etau PStor_rCutoff 
            if (par.opt_etau & par.opt_PStor_rCutoff)
                kk = kk + 1;
                tmp = [etau*WM*kC*DOCx(:,pindx.lPStor_rCutoff) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -etau*WM*N2C*kC*DOCx(:,pindx.lPStor_rCutoff); ...
                    Z ; ...
                    -etau*WM*kC*DOCx(:,pindx.lPStor_rCutoff)] ;

                RHS(:,kk) = tmp;
            end

            % etau alphaS 
            if (par.opt_etau & par.opt_alphaS)
                kk = kk + 1;
                tmp = [etau*WM*kC*DOCx(:,pindx.lalphaS) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -etau*WM*N2C*kC*DOCx(:,pindx.lalphaS); ...
                    Z ; ...
                    -etau*WM*kC*DOCx(:,pindx.lalphaS)] ;

                RHS(:,kk) = tmp;
            end

            % etad Q10Photo 
            if (par.opt_etad & par.opt_Q10Photo)
                kk = kk + 1;
                tmp = [etad*DM*kC*DOCx(:,pindx.lQ10Photo) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -etad*DM*N2C*kC*DOCx(:,pindx.lQ10Photo); ...
                    Z ; ...
                    -etad*DM*kC*DOCx(:,pindx.lQ10Photo)] ;

                RHS(:,kk) = tmp;
            end

            % etad fStorage 
            if (par.opt_etad & par.opt_fStorage)
                kk = kk + 1;
                tmp = [etad*DM*kC*DOCx(:,pindx.lfStorage) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -etad*DM*N2C*kC*DOCx(:,pindx.lfStorage); ...
                    Z ; ...
                    -etad*DM*kC*DOCx(:,pindx.lfStorage)] ;

                RHS(:,kk) = tmp;
            end

            % etad kST0 
            if (par.opt_etad & par.opt_kST0)
                kk = kk + 1;
                tmp = [etad*DM*kC*DOCx(:,pindx.lkST0) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -etad*DM*N2C*kC*DOCx(:,pindx.lkST0); ...
                    Z ; ...
                    -etad*DM*kC*DOCx(:,pindx.lkST0)] ;

                RHS(:,kk) = tmp;
            end

            % etad PStor_rCutoff 
            if (par.opt_etad & par.opt_PStor_rCutoff)
                kk = kk + 1;
                tmp = [etad*DM*kC*DOCx(:,pindx.lPStor_rCutoff) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -etad*DM*N2C*kC*DOCx(:,pindx.lPStor_rCutoff); ...
                    Z ; ...
                    -etad*DM*kC*DOCx(:,pindx.lPStor_rCutoff)] ;

                RHS(:,kk) = tmp;
            end

            % etad alphaS 
            if (par.opt_etad & par.opt_alphaS)
                kk = kk + 1;
                tmp = [etad*DM*kC*DOCx(:,pindx.lalphaS) ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    -etad*DM*N2C*kC*DOCx(:,pindx.lalphaS); ...
                    Z ; ...
                    -etad*DM*kC*DOCx(:,pindx.lalphaS)] ;

                RHS(:,kk) = tmp;
            end

            % bC_T Q10Photo
            if (par.opt_bC_T & par.opt_Q10Photo)
                kk = kk + 1;
                tmp = [Z ; ...
                    -PFD_bm*POCx(:,pindx.lQ10Photo); ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % bC_T fStorage
            if (par.opt_bC_T & par.opt_fStorage)
                kk = kk + 1;
                tmp = [Z ; ...
                    -PFD_bm*POCx(:,pindx.lfStorage); ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % bC_T kST0
            if (par.opt_bC_T & par.opt_kST0)
                kk = kk + 1;
                tmp = [Z ; ...
                    -PFD_bm*POCx(:,pindx.lkST0); ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % bC_T PStor_rCutoff
            if (par.opt_bC_T & par.opt_PStor_rCutoff)
                kk = kk + 1;
                tmp = [Z ; ...
                    -PFD_bm*POCx(:,pindx.lPStor_rCutoff); ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % bC_T alphaS
            if (par.opt_bC_T & par.opt_alphaS)
                kk = kk + 1;
                tmp = [Z ; ...
                    -PFD_bm*POCx(:,pindx.lalphaS); ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % bC Q10Photo
            if (par.opt_bC & par.opt_Q10Photo)
                kk = kk + 1;
                tmp = bC*[Z ; ...
                        -PFD_bb*POCx(:,pindx.lQ10Photo); ...
                        Z ; ...
                        Z ; ...
                        Z ; ...
                        Z ; ...
                        Z];
                
                RHS(:,kk) = tmp;
            end

            % bC fStorage
            if (par.opt_bC & par.opt_fStorage)
                kk = kk + 1;
                tmp = bC*[Z ; ...
                        -PFD_bb*POCx(:,pindx.lfStorage); ...
                        Z ; ...
                        Z ; ...
                        Z ; ...
                        Z ; ...
                        Z];
                
                RHS(:,kk) = tmp;
            end

            % bC kST0
            if (par.opt_bC & par.opt_kST0)
                kk = kk + 1;
                tmp = bC*[Z ; ...
                        -PFD_bb*POCx(:,pindx.lkST0); ...
                        Z ; ...
                        Z ; ...
                        Z ; ...
                        Z ; ...
                        Z];
                
                RHS(:,kk) = tmp;
            end

            % bC PStor_rCutoff
            if (par.opt_bC & par.opt_PStor_rCutoff)
                kk = kk + 1;
                tmp = bC*[Z ; ...
                        -PFD_bb*POCx(:,pindx.lPStor_rCutoff); ...
                        Z ; ...
                        Z ; ...
                        Z ; ...
                        Z ; ...
                        Z];
                
                RHS(:,kk) = tmp;
            end

            % bC alphaS
            if (par.opt_bC & par.opt_alphaS)
                kk = kk + 1;
                tmp = bC*[Z ; ...
                        -PFD_bb*POCx(:,pindx.lalphaS); ...
                        Z ; ...
                        Z ; ...
                        Z ; ...
                        Z ; ...
                        Z];
                
                RHS(:,kk) = tmp;
            end

            % d Q10Photo
            if (par.opt_d & par.opt_Q10Photo)
                kk = kk + 1;
                tmp = [Z ; ...
                    Z ; ...
                    Z ; ...
                    -d*PFD_d*PICx(:,pindx.lQ10Photo); ...
                    Z ; ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % d fStorage
            if (par.opt_d & par.opt_fStorage)
                kk = kk + 1;
                tmp = [Z ; ...
                    Z ; ...
                    Z ; ...
                    -d*PFD_d*PICx(:,pindx.lfStorage); ...
                    Z ; ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % d kST0
            if (par.opt_d & par.opt_kST0)
                kk = kk + 1;
                tmp = [Z ; ...
                    Z ; ...
                    Z ; ...
                    -d*PFD_d*PICx(:,pindx.lkST0); ...
                    Z ; ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % d PStor_rCutoff
            if (par.opt_d & par.opt_PStor_rCutoff)
                kk = kk + 1;
                tmp = [Z ; ...
                    Z ; ...
                    Z ; ...
                    -d*PFD_d*PICx(:,pindx.lPStor_rCutoff); ...
                    Z ; ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % d alphaS
            if (par.opt_d & par.opt_alphaS)
                kk = kk + 1;
                tmp = [Z ; ...
                    Z ; ...
                    Z ; ...
                    -d*PFD_d*PICx(:,pindx.lalphaS); ...
                    Z ; ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % Q10C Q10Photo
            if (par.opt_Q10C & par.opt_Q10Photo)
                kk = kk + 1;
                tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lQ10Photo); ...
                    Z ; ...
                    -d0(kC_Q10C)*DOCx(:,pindx.lQ10Photo); ...
                    Z ; ...
                    -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lQ10Photo); ...
                    Z ; ...
                    (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lQ10Photo)];
                
                RHS(:,kk) = tmp;
            end

            % Q10C fStorage
            if (par.opt_Q10C & par.opt_fStorage)
                kk = kk + 1;
                tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lfStorage); ...
                    Z ; ...
                    -d0(kC_Q10C)*DOCx(:,pindx.lfStorage); ...
                    Z ; ...
                    -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lfStorage); ...
                    Z ; ...
                    (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lfStorage)];
                
                RHS(:,kk) = tmp;
            end

            % Q10C kST0
            if (par.opt_Q10C & par.opt_kST0)
                kk = kk + 1;
                tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lkST0); ...
                    Z ; ...
                    -d0(kC_Q10C)*DOCx(:,pindx.lkST0); ...
                    Z ; ...
                    -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lkST0); ...
                    Z ; ...
                    (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lkST0)];
                
                RHS(:,kk) = tmp;
            end

            % Q10C PStor_rCutoff
            if (par.opt_Q10C & par.opt_PStor_rCutoff)
                kk = kk + 1;
                tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lPStor_rCutoff); ...
                    Z ; ...
                    -d0(kC_Q10C)*DOCx(:,pindx.lPStor_rCutoff); ...
                    Z ; ...
                    -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lPStor_rCutoff); ...
                    Z ; ...
                    (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lPStor_rCutoff)];
                
                RHS(:,kk) = tmp;
            end

            % Q10C alphaS
            if (par.opt_Q10C & par.opt_alphaS)
                kk = kk + 1;
                tmp = [eta*d0(kC_Q10C)*DOCx(:,pindx.lalphaS); ...
                    Z ; ...
                    -d0(kC_Q10C)*DOCx(:,pindx.lalphaS); ...
                    Z ; ...
                    -eta*N2C*d0(kC_Q10C)*DOCx(:,pindx.lalphaS); ...
                    Z ; ...
                    (I-eta)*d0(kC_Q10C)*DOCx(:,pindx.lalphaS)];
                
                RHS(:,kk) = tmp;
            end

            % kdC Q10Photo
            if (par.opt_kdC & par.opt_Q10Photo)
                kk = kk + 1;
                tmp = [eta*kC_kdC*DOCx(:,pindx.lQ10Photo); ...
                    Z; ...
                    -kC_kdC*DOCx(:,pindx.lQ10Photo); ...
                    Z ; ...
                    -eta*N2C*kC_kdC*DOCx(:,pindx.lQ10Photo); ...
                    Z ; ...
                    (I-eta)*kC_kdC*DOCx(:,pindx.lQ10Photo)];
                
                RHS(:,kk) = tmp;
            end

            % kdC fStorage
            if (par.opt_kdC & par.opt_fStorage)
                kk = kk + 1;
                tmp = [eta*kC_kdC*DOCx(:,pindx.lfStorage); ...
                    Z; ...
                    -kC_kdC*DOCx(:,pindx.lfStorage); ...
                    Z ; ...
                    -eta*N2C*kC_kdC*DOCx(:,pindx.lfStorage); ...
                    Z ; ...
                    (I-eta)*kC_kdC*DOCx(:,pindx.lfStorage)];
                
                RHS(:,kk) = tmp;
            end

            % kdC kST0
            if (par.opt_kdC & par.opt_kST0)
                kk = kk + 1;
                tmp = [eta*kC_kdC*DOCx(:,pindx.lkST0); ...
                    Z; ...
                    -kC_kdC*DOCx(:,pindx.lkST0); ...
                    Z ; ...
                    -eta*N2C*kC_kdC*DOCx(:,pindx.lkST0); ...
                    Z ; ...
                    (I-eta)*kC_kdC*DOCx(:,pindx.lkST0)];
                
                RHS(:,kk) = tmp;
            end

            % kdC PStor_rCutoff
            if (par.opt_kdC & par.opt_PStor_rCutoff)
                kk = kk + 1;
                tmp = [eta*kC_kdC*DOCx(:,pindx.lPStor_rCutoff); ...
                    Z; ...
                    -kC_kdC*DOCx(:,pindx.lPStor_rCutoff); ...
                    Z ; ...
                    -eta*N2C*kC_kdC*DOCx(:,pindx.lPStor_rCutoff); ...
                    Z ; ...
                    (I-eta)*kC_kdC*DOCx(:,pindx.lPStor_rCutoff)];
                
                RHS(:,kk) = tmp;
            end

            % kdC alphaS
            if (par.opt_kdC & par.opt_alphaS)
                kk = kk + 1;
                tmp = [eta*kC_kdC*DOCx(:,pindx.lalphaS); ...
                    Z; ...
                    -kC_kdC*DOCx(:,pindx.lalphaS); ...
                    Z ; ...
                    -eta*N2C*kC_kdC*DOCx(:,pindx.lalphaS); ...
                    Z ; ...
                    (I-eta)*kC_kdC*DOCx(:,pindx.lalphaS)];
                
                RHS(:,kk) = tmp;
            end

            % R_Si Q10Photo
            if (par.opt_R_Si & par.opt_Q10Photo)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lQ10Photo);
                tmp = [-(1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z ; ...
                    (1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    -2*(1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % R_Si fStorage
            if (par.opt_R_Si & par.opt_fStorage)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lfStorage);
                tmp = [-(1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z ; ...
                    (1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    -2*(1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % R_Si kST0
            if (par.opt_R_Si & par.opt_kST0)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lkST0);
                tmp = [-(1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z ; ...
                    (1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    -2*(1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % R_Si PStor_rCutoff
            if (par.opt_R_Si & par.opt_PStor_rCutoff)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lPStor_rCutoff);
                tmp = [-(1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z ; ...
                    (1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    -2*(1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % R_Si alphaS
            if (par.opt_R_Si & par.opt_alphaS)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lalphaS);
                tmp = [-(1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z ; ...
                    (1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    -2*(1-sigC-gamma)*RR_Si*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % rR Q10Photo
            if (par.opt_rR & par.opt_Q10Photo)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lQ10Photo);
                tmp = [-(1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z ; ...
                    (1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    -2*(1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % rR fStorage
            if (par.opt_rR & par.opt_fStorage)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lfStorage);
                tmp = [-(1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z ; ...
                    (1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    -2*(1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % rR kST0
            if (par.opt_rR & par.opt_kST0)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lkST0);
                tmp = [-(1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z ; ...
                    (1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    -2*(1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % rR PStor_rCutoff
            if (par.opt_rR & par.opt_PStor_rCutoff)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lPStor_rCutoff);
                tmp = [-(1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z ; ...
                    (1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    -2*(1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % rR alphaS
            if (par.opt_rR & par.opt_alphaS)
                kk = kk + 1;
                C2P_dxtmp = C2Px(:,par.pindx.lalphaS);
                tmp = [-(1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z ; ...
                    (1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    -2*(1-sigC-gamma)*RR_rR*(G*C2P_dxtmp); ...
                    Z ; ...
                    Z];
                
                RHS(:,kk) = tmp;
            end

            % ------------------------------------------------------
            % Cell model parameters
            ck = 0;
            for jj = 1:nbx %(npx+ncx+1):(npx+ncx+nbx)
                for jk = jj:nbx %jj:(npx+ncx+nbx)
                    kk = kk + 1;
                    ck = ck + 1;
                    C2P_dxxtmp = C2Pxx(:,ck);
                    tmp = [-((1-sigC-gamma)*RR)*(G*(C2P_dxxtmp)); ...
                            (1-sigC-gamma)*G*(C2P_dxxtmp); ...
                            sigC*G*(C2P_dxxtmp); ...
                            (1-sigC-gamma)*RR*(G*(C2P_dxxtmp)); ...
                            -2*(1-sigC-gamma)*RR*(G*(C2P_dxxtmp)) ; ...
                            -G*(C2P_dxxtmp); ...
                            Z];

                    RHS(:,kk) = tmp;
                end
            end


        end
        % ------------------------------------------------------
        Cxx = mfactor(FD, RHS);
    end
    toc
end


